{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISuperfluid",
          "name": "host",
          "type": "address"
        },
        {
          "internalType": "contract IConstantInflowNFT",
          "name": "constantInflowNFT",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_APPROVE_TO_CALLER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_INVALID_TOKEN_ID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COF_NFT_INVALID_SUPER_TOKEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COF_NFT_MINT_TO_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COF_NFT_ONLY_CONSTANT_INFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COF_NFT_ONLY_FLOW_AGREEMENTS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COF_NFT_TOKEN_ALREADY_EXISTS",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "codeAddress",
          "type": "address"
        }
      ],
      "name": "CodeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONSTANT_FLOW_AGREEMENT_V1",
      "outputs": [
        {
          "internalType": "contract IConstantFlowAgreementV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONSTANT_INFLOW_NFT",
      "outputs": [
        {
          "internalType": "contract IConstantInflowNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HOST",
      "outputs": [
        {
          "internalType": "contract ISuperfluid",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "castrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "flowDataByTokenId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowReceiver",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "flowStartDate",
              "type": "uint32"
            }
          ],
          "internalType": "struct IFlowNFTBase.FlowNFTData",
          "name": "flowData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCodeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "codeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nftName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nftSymbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperfluidToken",
          "name": "superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flowSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flowReceiver",
          "type": "address"
        }
      ],
      "name": "onCreate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperfluidToken",
          "name": "superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flowSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flowReceiver",
          "type": "address"
        }
      ],
      "name": "onDelete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperfluidToken",
          "name": "superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flowSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flowReceiver",
          "type": "address"
        }
      ],
      "name": "onUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "triggerMetadataUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updateCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60e06040523480156200001157600080fd5b506040516200267838038062002678833981016040819052620000349162000127565b6001600160a01b03831660a0819052604051635b69006f60e11b81527fa9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd360048201528491839163b6d200de90602401602060405180830381865afa158015620000a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c7919062000227565b6001600160a01b03166080526003620000e18282620002dd565b505050506001600160a01b031660c05250620003a9565b6001600160a01b03811681146200010e57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156200013d57600080fd5b83516200014a81620000f8565b809350506020808501516200015f81620000f8565b60408601519093506001600160401b03808211156200017d57600080fd5b818701915087601f8301126200019257600080fd5b815181811115620001a757620001a762000111565b604051601f8201601f19908116603f01168101908382118183101715620001d257620001d262000111565b816040528281528a86848701011115620001eb57600080fd5b600093505b828410156200020f5784840186015181850187015292850192620001f0565b60008684830101528096505050505050509250925092565b6000602082840312156200023a57600080fd5b81516200024781620000f8565b9392505050565b600181811c908216806200026357607f821691505b6020821081036200028457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002d857600081815260208120601f850160051c81016020861015620002b35750805b601f850160051c820191505b81811015620002d457828155600101620002bf565b5050505b505050565b81516001600160401b03811115620002f957620002f962000111565b62000311816200030a84546200024e565b846200028a565b602080601f831160018114620003495760008415620003305750858301515b600019600386901b1c1916600185901b178555620002d4565b600085815260208120601f198616915b828110156200037a5788860151825594840194600190910190840162000359565b5085821015620003995787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05161226762000411600039600081816102ca01528181610ad701528181610bd10152610ce80152600081816102a3015261065301526000818161023001528181610a4a01528181610b4d01528181610c4901526111e001526122676000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806352d1902d116100f9578063a22cb46511610097578063e985e9c511610071578063e985e9c514610413578063eb54a7ca14610426578063ef1f023714610439578063f7e3d9831461044c57600080fd5b8063a22cb465146103da578063b88d4fde146103ed578063c87b56dd1461040057600080fd5b806389f71d2d116100d357806389f71d2d1461035e5780638d47859e1461037157806395d89b41146103ca5780639903ad38146103d257600080fd5b806352d1902d146103075780636352211e1461033757806370a082311461034a57600080fd5b80632f3885601161016657806349f289dc1161014057806349f289dc1461029e5780634c5c0c85146102c55780634cd88b76146102ec57806350d75d25146102ff57600080fd5b80632f3885601461026557806342842e0e14610278578063469519541461028b57600080fd5b806301ffc9a7146101ae57806306fdde03146101d6578063081812fc146101eb578063095ea7b314610216578063181561011461022b57806323b872dd14610252575b600080fd5b6101c16101bc36600461196c565b61045f565b60405190151581526020015b60405180910390f35b6101de6104b1565b6040516101cd91906119ba565b6101fe6101f93660046119ed565b610543565b6040516001600160a01b0390911681526020016101cd565b610229610224366004611a1b565b61056a565b005b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b610229610260366004611a47565b6105f6565b6102296102733660046119ed565b610628565b610229610286366004611a47565b610634565b610229610299366004611a88565b61064f565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6102296102fa366004611b72565b61070b565b6101fe6107f1565b7f87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b7845b6040519081526020016101cd565b6101fe6103453660046119ed565b610820565b610329610358366004611a88565b50600190565b61032961036c366004611bd6565b610859565b61038461037f3660046119ed565b61086e565b6040805182516001600160a01b03908116825260208085015182169083015283830151169181019190915260609182015163ffffffff16918101919091526080016101cd565b6101de6108ef565b6102296108fe565b6102296103e8366004611c21565b6109c0565b6102296103fb366004611c5f565b6109cb565b6101de61040e3660046119ed565b610a04565b6101c1610421366004611cdf565b610a11565b610229610434366004611bd6565b610a3f565b610229610447366004611bd6565b610b42565b61022961045a366004611bd6565b610c3e565b60006301ffc9a760e01b6001600160e01b03198316148061049057506380ac58cd60e01b6001600160e01b03198316145b806104ab5750635b5e139f60e01b6001600160e01b03198316145b92915050565b6060600180546104c090611d0d565b80601f01602080910402602001604051908101604052809291908181526020018280546104ec90611d0d565b80156105395780601f1061050e57610100808354040283529160200191610539565b820191906000526020600020905b81548152906001019060200180831161051c57829003601f168201915b5050505050905090565b600061054e82610d17565b506000908152600460205260409020546001600160a01b031690565b600061057582610820565b9050806001600160a01b0316836001600160a01b0316036105a95760405163e4790b2560e01b815260040160405180910390fd5b336001600160a01b038216148015906105c957506105c78133610a11565b155b156105e75760405163519a92c160e11b815260040160405180910390fd5b6105f18383610d4f565b505050565b6106003382610db9565b61061d576040516312a8eb0360e11b815260040160405180910390fd5b6105f1838383610e17565b61063181610e30565b50565b6105f1838383604051806020016040528060008152506109cb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663731aed6e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d39190611d47565b9050336001600160a01b038216146106fe5760405163ebb7505b60e01b815260040160405180910390fd5b61070782610e60565b5050565b600054610100900460ff161580801561072b5750600054600160ff909116105b806107455750303b158015610745575060005460ff166001145b61076a5760405162461bcd60e51b815260040161076190611d64565b60405180910390fd5b6000805460ff19166001179055801561078d576000805461ff0019166101001790555b60016107998482611e00565b5060026107a68382611e00565b5080156105f1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b600061081b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b905090565b6000818152601660205260408120600101546001600160a01b0316806104ab5760405163eab95e3b60e01b815260040160405180910390fd5b600061086684848461109a565b949350505050565b60408051608081018252600080825260208201819052918101829052606081019190915250600090815260166020908152604091829020825160808101845281546001600160a01b039081168252600183015481169382019390935260029091015491821692810192909252600160a01b900463ffffffff16606082015290565b6060600280546104c090611d0d565b600054610100900460ff161580801561091e5750600054600160ff909116105b806109385750303b158015610938575060005460ff166001145b6109545760405162461bcd60e51b815260040161076190611d64565b6000805460ff191660011790558015610977576000805461ff0019166101001790555b8015610631576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6107073383836110e6565b6109d53383610db9565b6109f2576040516312a8eb0360e11b815260040160405180910390fd5b6109fe84848484611185565b50505050565b60606104ab826000611190565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a885760405163d367b64f60e01b815260040160405180910390fd5b6000610a9584848461109a565b6000818152601660205260409020600101549091506001600160a01b0316156109fe57610ac181610e30565b604051630179c42b60e51b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632f388560906024015b600060405180830381600087803b158015610b2457600080fd5b505af1158015610b38573d6000803e3d6000fd5b5050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b8b5760405163d367b64f60e01b815260040160405180910390fd5b6000610b9884848461109a565b6000818152601660205260409020600101549091506001600160a01b0316156109fe57604051630852cd8d60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b158015610c1d57600080fd5b505af1158015610c31573d6000803e3d6000fd5b505050506109fe816112e5565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c875760405163d367b64f60e01b815260040160405180910390fd5b6000610c9484848461109a565b6000818152601660205260409020600101549091506001600160a01b03166109fe57610cc284848484611381565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401610b0a565b6000818152601660205260409020600101546001600160a01b03166106315760405163eab95e3b60e01b815260040160405180910390fd5b600081815260046020908152604080832080546001600160a01b0319166001600160a01b038781169182179092556016909352818420600101549151859492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050565b600080610dc583610820565b9050806001600160a01b0316846001600160a01b03161480610dec5750610dec8185610a11565b806108665750836001600160a01b0316610e0584610543565b6001600160a01b031614949350505050565b60405163553a3f6560e11b815260040160405180910390fd5b6040518181527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7906020016109b5565b6000610e8a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6001600160a01b031603610ee05760405162461bcd60e51b815260206004820152601d60248201527f5555505350726f786961626c653a206e6f742075706772616461626c650000006044820152606401610761565b806001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f429190611ec0565b7f87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b78414610fbc5760405162461bcd60e51b815260206004820152602360248201527f5555505350726f786961626c653a206e6f7420636f6d70617469626c65206c6f60448201526267696360e81b6064820152608401610761565b6001600160a01b03811630036110145760405162461bcd60e51b815260206004820152601960248201527f5555505350726f786961626c653a2070726f7879206c6f6f70000000000000006044820152606401610761565b61103c817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b7fe011bc04c286c344a8fcbb8de77f953da762c3e25d8cdea984147fc4168a5dcc7f87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b784604080519182526001600160a01b0384166020830152016109b5565b60408051466020808301919091526001600160a01b03958616828401529385166060820152919093166080808301919091528351808303909101815260a0909101909252815191012090565b816001600160a01b0316836001600160a01b0316036111185760405163d3c7732960e01b815260040160405180910390fd5b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6109fe848484610e17565b6060600061119d8461086e565b805160208201516040808401519051631cd43d1160e31b81526001600160a01b0380851660048301529283166024820152908216604482015292935090916000917f0000000000000000000000000000000000000000000000000000000000000000169063e6a1e88890606401608060405180830381865afa158015611227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124b9190611ed9565b5050915050600361125b876114e3565b611272836bffffffffffffffffffffffff1661165e565b8761129a576040518060400160405280600581526020016466616c736560d81b8152506112b8565b604051806040016040528060048152602001637472756560e01b8152505b6040516020016112cb9493929190611f39565b604051602081830303815290604052935050505092915050565b60006112f082610820565b600083815260046020526040902080546001600160a01b0319169055905060008281526016602052604080822080546001600160a01b03199081168255600182018054909116905560020180546001600160c01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383166113a8576040516343d05e5160e01b815260040160405180910390fd5b816001600160a01b0316836001600160a01b0316036113da5760405163a07fa90960e01b815260040160405180910390fd5b6000818152601660205260409020600101546001600160a01b0316156114135760405163e248018360e01b815260040160405180910390fd5b604080516080810182526001600160a01b038087168252858116602080840182815287841685870190815263ffffffff4281166060880190815260008a81526016909552888520975188549088166001600160a01b0319918216178955935160018901805491891691909516179093559051600290960180549251909116600160a01b026001600160c01b03199092169590941694909417939093179091559151839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450505050565b606060006114f08361086e565b905061150a81600001516001600160a01b031660146116f1565b6115134661165e565b82600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611555573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261157d9190810190612005565b61159584602001516001600160a01b031660146116f1565b6115ad85604001516001600160a01b031660146116f1565b61161e86600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611616919061207c565b60ff1661165e565b611631876060015163ffffffff1661165e565b604051602001611647979695949392919061209f565b604051602081830303815290604052915050919050565b6060600061166b83611894565b600101905060008167ffffffffffffffff81111561168b5761168b611aa5565b6040519080825280601f01601f1916602001820160405280156116b5576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846116bf57509392505050565b606060006117008360026121da565b61170b9060026121f1565b67ffffffffffffffff81111561172357611723611aa5565b6040519080825280601f01601f19166020018201604052801561174d576020820181803683370190505b509050600360fc1b8160008151811061176857611768612204565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061179757611797612204565b60200101906001600160f81b031916908160001a90535060006117bb8460026121da565b6117c69060016121f1565b90505b600181111561183e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106117fa576117fa612204565b1a60f81b82828151811061181057611810612204565b60200101906001600160f81b031916908160001a90535060049490941c936118378161221a565b90506117c9565b50831561188d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610761565b9392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106118d35772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106118ff576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061191d57662386f26fc10000830492506010015b6305f5e1008310611935576305f5e100830492506008015b612710831061194957612710830492506004015b6064831061195b576064830492506002015b600a83106104ab5760010192915050565b60006020828403121561197e57600080fd5b81356001600160e01b03198116811461188d57600080fd5b60005b838110156119b1578181015183820152602001611999565b50506000910152565b60208152600082518060208401526119d9816040850160208701611996565b601f01601f19169190910160400192915050565b6000602082840312156119ff57600080fd5b5035919050565b6001600160a01b038116811461063157600080fd5b60008060408385031215611a2e57600080fd5b8235611a3981611a06565b946020939093013593505050565b600080600060608486031215611a5c57600080fd5b8335611a6781611a06565b92506020840135611a7781611a06565b929592945050506040919091013590565b600060208284031215611a9a57600080fd5b813561188d81611a06565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ae457611ae4611aa5565b604052919050565b600067ffffffffffffffff821115611b0657611b06611aa5565b50601f01601f191660200190565b6000611b27611b2284611aec565b611abb565b9050828152838383011115611b3b57600080fd5b828260208301376000602084830101529392505050565b600082601f830112611b6357600080fd5b61188d83833560208501611b14565b60008060408385031215611b8557600080fd5b823567ffffffffffffffff80821115611b9d57600080fd5b611ba986838701611b52565b93506020850135915080821115611bbf57600080fd5b50611bcc85828601611b52565b9150509250929050565b600080600060608486031215611beb57600080fd5b8335611bf681611a06565b92506020840135611c0681611a06565b91506040840135611c1681611a06565b809150509250925092565b60008060408385031215611c3457600080fd5b8235611c3f81611a06565b915060208301358015158114611c5457600080fd5b809150509250929050565b60008060008060808587031215611c7557600080fd5b8435611c8081611a06565b93506020850135611c9081611a06565b925060408501359150606085013567ffffffffffffffff811115611cb357600080fd5b8501601f81018713611cc457600080fd5b611cd387823560208401611b14565b91505092959194509250565b60008060408385031215611cf257600080fd5b8235611cfd81611a06565b91506020830135611c5481611a06565b600181811c90821680611d2157607f821691505b602082108103611d4157634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611d5957600080fd5b815161188d81611a06565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b601f8211156105f157600081815260208120601f850160051c81016020861015611dd95750805b601f850160051c820191505b81811015611df857828155600101611de5565b505050505050565b815167ffffffffffffffff811115611e1a57611e1a611aa5565b611e2e81611e288454611d0d565b84611db2565b602080601f831160018114611e635760008415611e4b5750858301515b600019600386901b1c1916600185901b178555611df8565b600085815260208120601f198616915b82811015611e9257888601518255948401946001909101908401611e73565b5085821015611eb05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611ed257600080fd5b5051919050565b60008060008060808587031215611eef57600080fd5b84519350602085015180600b0b8114611f0757600080fd5b6040860151606090960151949790965092505050565b60008151611f2f818560208601611996565b9290920192915050565b6000808654611f4781611d0d565b60018281168015611f5f5760018114611f7457611fa3565b60ff1984168752821515830287019450611fa3565b8a60005260208060002060005b85811015611f9a5781548a820152908401908201611f81565b50505082870194505b505050508551611fb7818360208a01611996565b6926666c6f77526174653d60b01b9101908152611ffa611ff4611fdd600a840188611f1d565b6a2669735f696e666c6f773d60a81b8152600b0190565b85611f1d565b979650505050505050565b60006020828403121561201757600080fd5b815167ffffffffffffffff81111561202e57600080fd5b8201601f8101841361203f57600080fd5b805161204d611b2282611aec565b81815285602083850101111561206257600080fd5b612073826020830160208601611996565b95945050505050565b60006020828403121561208e57600080fd5b815160ff8116811461188d57600080fd5b6e26746f6b656e5f616464726573733d60881b8152600088516120c981600f850160208d01611996565b693f636861696e5f69643d60b01b600f9184019182015288516120f3816019840160208d01611996565b6d26746f6b656e5f73796d626f6c3d60901b601992909101918201528751612122816027840160208c01611996565b672673656e6465723d60c01b60279290910191820152865161214b81602f840160208b01611996565b692672656365697665723d60b01b602f92909101918201526121b6611ff461219e61219861217c603986018b611f1d565b6f26746f6b656e5f646563696d616c733d60801b815260100190565b88611f1d565b6b2673746172745f646174653d60a01b8152600c0190565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104ab576104ab6121c4565b808201808211156104ab576104ab6121c4565b634e487b7160e01b600052603260045260246000fd5b600081612229576122296121c4565b50600019019056fea2646970667358221220dc538143e33fab1f50d1b3755f5ec8a166ff00198f2fb0e6a23af8b165d9eeb564736f6c63430008130033",
    "sourceMap": "1062:7035:85:-:0;;;1558:204;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4108:11:86;;;;;;4221:235;;-1:-1:-1;;;4221:235:86;;4372:66;4221:235;;;1909:25:108;4108:11:86;;1697:7:85;;4221:35:86;;1882:18:108;;4221:235:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4129:351:86;;;4490:8;:18;4501:7;4490:8;:18;:::i;:::-;-1:-1:-1;;;;;;;;;1716:39:85::1;;::::0;-1:-1:-1;1062:7035:85;;14:144:108;-1:-1:-1;;;;;102:31:108;;92:42;;82:70;;148:1;145;138:12;82:70;14:144;:::o;163:127::-;224:10;219:3;215:20;212:1;205:31;255:4;252:1;245:15;279:4;276:1;269:15;295:1379;442:6;450;458;511:2;499:9;490:7;486:23;482:32;479:52;;;527:1;524;517:12;479:52;559:9;553:16;578:44;616:5;578:44;:::i;:::-;641:5;631:15;;;665:2;712;701:9;697:18;691:25;725:46;763:7;725:46;:::i;:::-;841:2;826:18;;820:25;790:7;;-1:-1:-1;;;;;;894:14:108;;;891:34;;;921:1;918;911:12;891:34;959:6;948:9;944:22;934:32;;1004:7;997:4;993:2;989:13;985:27;975:55;;1026:1;1023;1016:12;975:55;1055:2;1049:9;1077:2;1073;1070:10;1067:36;;;1083:18;;:::i;:::-;1158:2;1152:9;1126:2;1212:13;;-1:-1:-1;;1208:22:108;;;1232:2;1204:31;1200:40;1188:53;;;1256:18;;;1276:22;;;1253:46;1250:72;;;1302:18;;:::i;:::-;1342:10;1338:2;1331:22;1377:2;1369:6;1362:18;1417:7;1412:2;1407;1403;1399:11;1395:20;1392:33;1389:53;;;1438:1;1435;1428:12;1389:53;1460:1;1451:10;;1470:129;1484:2;1481:1;1478:9;1470:129;;;1572:10;;;1568:19;;1562:26;1541:14;;;1537:23;;1530:59;1495:10;;;;1470:129;;;1641:1;1636:2;1631;1623:6;1619:15;1615:24;1608:35;1662:6;1652:16;;;;;;;;295:1379;;;;;:::o;1945:289::-;2040:6;2093:2;2081:9;2072:7;2068:23;2064:32;2061:52;;;2109:1;2106;2099:12;2061:52;2141:9;2135:16;2160:44;2198:5;2160:44;:::i;:::-;2223:5;1945:289;-1:-1:-1;;;1945:289:108:o;2239:380::-;2318:1;2314:12;;;;2361;;;2382:61;;2436:4;2428:6;2424:17;2414:27;;2382:61;2489:2;2481:6;2478:14;2458:18;2455:38;2452:161;;2535:10;2530:3;2526:20;2523:1;2516:31;2570:4;2567:1;2560:15;2598:4;2595:1;2588:15;2452:161;;2239:380;;;:::o;2750:545::-;2852:2;2847:3;2844:11;2841:448;;;2888:1;2913:5;2909:2;2902:17;2958:4;2954:2;2944:19;3028:2;3016:10;3012:19;3009:1;3005:27;2999:4;2995:38;3064:4;3052:10;3049:20;3046:47;;;-1:-1:-1;3087:4:108;3046:47;3142:2;3137:3;3133:12;3130:1;3126:20;3120:4;3116:31;3106:41;;3197:82;3215:2;3208:5;3205:13;3197:82;;;3260:17;;;3241:1;3230:13;3197:82;;;3201:3;;;2841:448;2750:545;;;:::o;3471:1352::-;3591:10;;-1:-1:-1;;;;;3613:30:108;;3610:56;;;3646:18;;:::i;:::-;3675:97;3765:6;3725:38;3757:4;3751:11;3725:38;:::i;:::-;3719:4;3675:97;:::i;:::-;3827:4;;3891:2;3880:14;;3908:1;3903:663;;;;4610:1;4627:6;4624:89;;;-1:-1:-1;4679:19:108;;;4673:26;4624:89;-1:-1:-1;;3428:1:108;3424:11;;;3420:24;3416:29;3406:40;3452:1;3448:11;;;3403:57;4726:81;;3873:944;;3903:663;2697:1;2690:14;;;2734:4;2721:18;;-1:-1:-1;;3939:20:108;;;4057:236;4071:7;4068:1;4065:14;4057:236;;;4160:19;;;4154:26;4139:42;;4252:27;;;;4220:1;4208:14;;;;4087:19;;4057:236;;;4061:3;4321:6;4312:7;4309:19;4306:201;;;4382:19;;;4376:26;-1:-1:-1;;4465:1:108;4461:14;;;4477:3;4457:24;4453:37;4449:42;4434:58;4419:74;;4306:201;-1:-1:-1;;;;;4553:1:108;4537:14;;;4533:22;4520:36;;-1:-1:-1;3471:1352:108:o;:::-;1062:7035:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c806352d1902d116100f9578063a22cb46511610097578063e985e9c511610071578063e985e9c514610413578063eb54a7ca14610426578063ef1f023714610439578063f7e3d9831461044c57600080fd5b8063a22cb465146103da578063b88d4fde146103ed578063c87b56dd1461040057600080fd5b806389f71d2d116100d357806389f71d2d1461035e5780638d47859e1461037157806395d89b41146103ca5780639903ad38146103d257600080fd5b806352d1902d146103075780636352211e1461033757806370a082311461034a57600080fd5b80632f3885601161016657806349f289dc1161014057806349f289dc1461029e5780634c5c0c85146102c55780634cd88b76146102ec57806350d75d25146102ff57600080fd5b80632f3885601461026557806342842e0e14610278578063469519541461028b57600080fd5b806301ffc9a7146101ae57806306fdde03146101d6578063081812fc146101eb578063095ea7b314610216578063181561011461022b57806323b872dd14610252575b600080fd5b6101c16101bc36600461196c565b61045f565b60405190151581526020015b60405180910390f35b6101de6104b1565b6040516101cd91906119ba565b6101fe6101f93660046119ed565b610543565b6040516001600160a01b0390911681526020016101cd565b610229610224366004611a1b565b61056a565b005b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b610229610260366004611a47565b6105f6565b6102296102733660046119ed565b610628565b610229610286366004611a47565b610634565b610229610299366004611a88565b61064f565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6102296102fa366004611b72565b61070b565b6101fe6107f1565b7f87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b7845b6040519081526020016101cd565b6101fe6103453660046119ed565b610820565b610329610358366004611a88565b50600190565b61032961036c366004611bd6565b610859565b61038461037f3660046119ed565b61086e565b6040805182516001600160a01b03908116825260208085015182169083015283830151169181019190915260609182015163ffffffff16918101919091526080016101cd565b6101de6108ef565b6102296108fe565b6102296103e8366004611c21565b6109c0565b6102296103fb366004611c5f565b6109cb565b6101de61040e3660046119ed565b610a04565b6101c1610421366004611cdf565b610a11565b610229610434366004611bd6565b610a3f565b610229610447366004611bd6565b610b42565b61022961045a366004611bd6565b610c3e565b60006301ffc9a760e01b6001600160e01b03198316148061049057506380ac58cd60e01b6001600160e01b03198316145b806104ab5750635b5e139f60e01b6001600160e01b03198316145b92915050565b6060600180546104c090611d0d565b80601f01602080910402602001604051908101604052809291908181526020018280546104ec90611d0d565b80156105395780601f1061050e57610100808354040283529160200191610539565b820191906000526020600020905b81548152906001019060200180831161051c57829003601f168201915b5050505050905090565b600061054e82610d17565b506000908152600460205260409020546001600160a01b031690565b600061057582610820565b9050806001600160a01b0316836001600160a01b0316036105a95760405163e4790b2560e01b815260040160405180910390fd5b336001600160a01b038216148015906105c957506105c78133610a11565b155b156105e75760405163519a92c160e11b815260040160405180910390fd5b6105f18383610d4f565b505050565b6106003382610db9565b61061d576040516312a8eb0360e11b815260040160405180910390fd5b6105f1838383610e17565b61063181610e30565b50565b6105f1838383604051806020016040528060008152506109cb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663731aed6e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d39190611d47565b9050336001600160a01b038216146106fe5760405163ebb7505b60e01b815260040160405180910390fd5b61070782610e60565b5050565b600054610100900460ff161580801561072b5750600054600160ff909116105b806107455750303b158015610745575060005460ff166001145b61076a5760405162461bcd60e51b815260040161076190611d64565b60405180910390fd5b6000805460ff19166001179055801561078d576000805461ff0019166101001790555b60016107998482611e00565b5060026107a68382611e00565b5080156105f1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b600061081b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b905090565b6000818152601660205260408120600101546001600160a01b0316806104ab5760405163eab95e3b60e01b815260040160405180910390fd5b600061086684848461109a565b949350505050565b60408051608081018252600080825260208201819052918101829052606081019190915250600090815260166020908152604091829020825160808101845281546001600160a01b039081168252600183015481169382019390935260029091015491821692810192909252600160a01b900463ffffffff16606082015290565b6060600280546104c090611d0d565b600054610100900460ff161580801561091e5750600054600160ff909116105b806109385750303b158015610938575060005460ff166001145b6109545760405162461bcd60e51b815260040161076190611d64565b6000805460ff191660011790558015610977576000805461ff0019166101001790555b8015610631576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6107073383836110e6565b6109d53383610db9565b6109f2576040516312a8eb0360e11b815260040160405180910390fd5b6109fe84848484611185565b50505050565b60606104ab826000611190565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a885760405163d367b64f60e01b815260040160405180910390fd5b6000610a9584848461109a565b6000818152601660205260409020600101549091506001600160a01b0316156109fe57610ac181610e30565b604051630179c42b60e51b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632f388560906024015b600060405180830381600087803b158015610b2457600080fd5b505af1158015610b38573d6000803e3d6000fd5b5050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b8b5760405163d367b64f60e01b815260040160405180910390fd5b6000610b9884848461109a565b6000818152601660205260409020600101549091506001600160a01b0316156109fe57604051630852cd8d60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b158015610c1d57600080fd5b505af1158015610c31573d6000803e3d6000fd5b505050506109fe816112e5565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c875760405163d367b64f60e01b815260040160405180910390fd5b6000610c9484848461109a565b6000818152601660205260409020600101549091506001600160a01b03166109fe57610cc284848484611381565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401610b0a565b6000818152601660205260409020600101546001600160a01b03166106315760405163eab95e3b60e01b815260040160405180910390fd5b600081815260046020908152604080832080546001600160a01b0319166001600160a01b038781169182179092556016909352818420600101549151859492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050565b600080610dc583610820565b9050806001600160a01b0316846001600160a01b03161480610dec5750610dec8185610a11565b806108665750836001600160a01b0316610e0584610543565b6001600160a01b031614949350505050565b60405163553a3f6560e11b815260040160405180910390fd5b6040518181527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7906020016109b5565b6000610e8a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6001600160a01b031603610ee05760405162461bcd60e51b815260206004820152601d60248201527f5555505350726f786961626c653a206e6f742075706772616461626c650000006044820152606401610761565b806001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f429190611ec0565b7f87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b78414610fbc5760405162461bcd60e51b815260206004820152602360248201527f5555505350726f786961626c653a206e6f7420636f6d70617469626c65206c6f60448201526267696360e81b6064820152608401610761565b6001600160a01b03811630036110145760405162461bcd60e51b815260206004820152601960248201527f5555505350726f786961626c653a2070726f7879206c6f6f70000000000000006044820152606401610761565b61103c817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b7fe011bc04c286c344a8fcbb8de77f953da762c3e25d8cdea984147fc4168a5dcc7f87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b784604080519182526001600160a01b0384166020830152016109b5565b60408051466020808301919091526001600160a01b03958616828401529385166060820152919093166080808301919091528351808303909101815260a0909101909252815191012090565b816001600160a01b0316836001600160a01b0316036111185760405163d3c7732960e01b815260040160405180910390fd5b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6109fe848484610e17565b6060600061119d8461086e565b805160208201516040808401519051631cd43d1160e31b81526001600160a01b0380851660048301529283166024820152908216604482015292935090916000917f0000000000000000000000000000000000000000000000000000000000000000169063e6a1e88890606401608060405180830381865afa158015611227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124b9190611ed9565b5050915050600361125b876114e3565b611272836bffffffffffffffffffffffff1661165e565b8761129a576040518060400160405280600581526020016466616c736560d81b8152506112b8565b604051806040016040528060048152602001637472756560e01b8152505b6040516020016112cb9493929190611f39565b604051602081830303815290604052935050505092915050565b60006112f082610820565b600083815260046020526040902080546001600160a01b0319169055905060008281526016602052604080822080546001600160a01b03199081168255600182018054909116905560020180546001600160c01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383166113a8576040516343d05e5160e01b815260040160405180910390fd5b816001600160a01b0316836001600160a01b0316036113da5760405163a07fa90960e01b815260040160405180910390fd5b6000818152601660205260409020600101546001600160a01b0316156114135760405163e248018360e01b815260040160405180910390fd5b604080516080810182526001600160a01b038087168252858116602080840182815287841685870190815263ffffffff4281166060880190815260008a81526016909552888520975188549088166001600160a01b0319918216178955935160018901805491891691909516179093559051600290960180549251909116600160a01b026001600160c01b03199092169590941694909417939093179091559151839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450505050565b606060006114f08361086e565b905061150a81600001516001600160a01b031660146116f1565b6115134661165e565b82600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611555573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261157d9190810190612005565b61159584602001516001600160a01b031660146116f1565b6115ad85604001516001600160a01b031660146116f1565b61161e86600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611616919061207c565b60ff1661165e565b611631876060015163ffffffff1661165e565b604051602001611647979695949392919061209f565b604051602081830303815290604052915050919050565b6060600061166b83611894565b600101905060008167ffffffffffffffff81111561168b5761168b611aa5565b6040519080825280601f01601f1916602001820160405280156116b5576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846116bf57509392505050565b606060006117008360026121da565b61170b9060026121f1565b67ffffffffffffffff81111561172357611723611aa5565b6040519080825280601f01601f19166020018201604052801561174d576020820181803683370190505b509050600360fc1b8160008151811061176857611768612204565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061179757611797612204565b60200101906001600160f81b031916908160001a90535060006117bb8460026121da565b6117c69060016121f1565b90505b600181111561183e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106117fa576117fa612204565b1a60f81b82828151811061181057611810612204565b60200101906001600160f81b031916908160001a90535060049490941c936118378161221a565b90506117c9565b50831561188d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610761565b9392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106118d35772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106118ff576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061191d57662386f26fc10000830492506010015b6305f5e1008310611935576305f5e100830492506008015b612710831061194957612710830492506004015b6064831061195b576064830492506002015b600a83106104ab5760010192915050565b60006020828403121561197e57600080fd5b81356001600160e01b03198116811461188d57600080fd5b60005b838110156119b1578181015183820152602001611999565b50506000910152565b60208152600082518060208401526119d9816040850160208701611996565b601f01601f19169190910160400192915050565b6000602082840312156119ff57600080fd5b5035919050565b6001600160a01b038116811461063157600080fd5b60008060408385031215611a2e57600080fd5b8235611a3981611a06565b946020939093013593505050565b600080600060608486031215611a5c57600080fd5b8335611a6781611a06565b92506020840135611a7781611a06565b929592945050506040919091013590565b600060208284031215611a9a57600080fd5b813561188d81611a06565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ae457611ae4611aa5565b604052919050565b600067ffffffffffffffff821115611b0657611b06611aa5565b50601f01601f191660200190565b6000611b27611b2284611aec565b611abb565b9050828152838383011115611b3b57600080fd5b828260208301376000602084830101529392505050565b600082601f830112611b6357600080fd5b61188d83833560208501611b14565b60008060408385031215611b8557600080fd5b823567ffffffffffffffff80821115611b9d57600080fd5b611ba986838701611b52565b93506020850135915080821115611bbf57600080fd5b50611bcc85828601611b52565b9150509250929050565b600080600060608486031215611beb57600080fd5b8335611bf681611a06565b92506020840135611c0681611a06565b91506040840135611c1681611a06565b809150509250925092565b60008060408385031215611c3457600080fd5b8235611c3f81611a06565b915060208301358015158114611c5457600080fd5b809150509250929050565b60008060008060808587031215611c7557600080fd5b8435611c8081611a06565b93506020850135611c9081611a06565b925060408501359150606085013567ffffffffffffffff811115611cb357600080fd5b8501601f81018713611cc457600080fd5b611cd387823560208401611b14565b91505092959194509250565b60008060408385031215611cf257600080fd5b8235611cfd81611a06565b91506020830135611c5481611a06565b600181811c90821680611d2157607f821691505b602082108103611d4157634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611d5957600080fd5b815161188d81611a06565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b601f8211156105f157600081815260208120601f850160051c81016020861015611dd95750805b601f850160051c820191505b81811015611df857828155600101611de5565b505050505050565b815167ffffffffffffffff811115611e1a57611e1a611aa5565b611e2e81611e288454611d0d565b84611db2565b602080601f831160018114611e635760008415611e4b5750858301515b600019600386901b1c1916600185901b178555611df8565b600085815260208120601f198616915b82811015611e9257888601518255948401946001909101908401611e73565b5085821015611eb05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611ed257600080fd5b5051919050565b60008060008060808587031215611eef57600080fd5b84519350602085015180600b0b8114611f0757600080fd5b6040860151606090960151949790965092505050565b60008151611f2f818560208601611996565b9290920192915050565b6000808654611f4781611d0d565b60018281168015611f5f5760018114611f7457611fa3565b60ff1984168752821515830287019450611fa3565b8a60005260208060002060005b85811015611f9a5781548a820152908401908201611f81565b50505082870194505b505050508551611fb7818360208a01611996565b6926666c6f77526174653d60b01b9101908152611ffa611ff4611fdd600a840188611f1d565b6a2669735f696e666c6f773d60a81b8152600b0190565b85611f1d565b979650505050505050565b60006020828403121561201757600080fd5b815167ffffffffffffffff81111561202e57600080fd5b8201601f8101841361203f57600080fd5b805161204d611b2282611aec565b81815285602083850101111561206257600080fd5b612073826020830160208601611996565b95945050505050565b60006020828403121561208e57600080fd5b815160ff8116811461188d57600080fd5b6e26746f6b656e5f616464726573733d60881b8152600088516120c981600f850160208d01611996565b693f636861696e5f69643d60b01b600f9184019182015288516120f3816019840160208d01611996565b6d26746f6b656e5f73796d626f6c3d60901b601992909101918201528751612122816027840160208c01611996565b672673656e6465723d60c01b60279290910191820152865161214b81602f840160208b01611996565b692672656365697665723d60b01b602f92909101918201526121b6611ff461219e61219861217c603986018b611f1d565b6f26746f6b656e5f646563696d616c733d60801b815260100190565b88611f1d565b6b2673746172745f646174653d60a01b8152600c0190565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104ab576104ab6121c4565b808201808211156104ab576104ab6121c4565b634e487b7160e01b600052603260045260246000fd5b600081612229576122296121c4565b50600019019056fea2646970667358221220dc538143e33fab1f50d1b3755f5ec8a166ff00198f2fb0e6a23af8b165d9eeb564736f6c63430008130033",
    "sourceMap": "1062:7035:85:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5723:360:86;;;;;;:::i;:::-;;:::i;:::-;;;470:14:108;;463:22;445:41;;433:2;418:18;5723:360:86;;;;;;;;6818:100;;;:::i;:::-;;;;;;;:::i;10773:181::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1502:32:108;;;1484:51;;1472:2;1457:18;10773:181:86;1338:203:108;9797:416:86;;;;;;:::i;:::-;;:::i;:::-;;1717:68;;;;;11415:309;;;;;;:::i;:::-;;:::i;5265:105::-;;;;;;:::i;:::-;;:::i;11758:181::-;;;;;;:::i;:::-;;:::i;4766:317::-;;;;;;:::i;:::-;;:::i;1841:33::-;;;;;1132:55:85;;;;;4521:239:86;;;;;;:::i;:::-;;:::i;400:122:94:-;;;:::i;1842:209:85:-;1935:109;1842:209;;;5290:25:108;;;5278:2;5263:18;1842:209:85;5144:177:108;6117:259:86;;;;;;:::i;:::-;;:::i;6532:119::-;;;;;;:::i;:::-;-1:-1:-1;6643:1:86;;6532:119;10252:212;;;;;;:::i;:::-;;:::i;2232:235:85:-;;;;;;:::i;:::-;;:::i;:::-;;;;6309:13:108;;-1:-1:-1;;;;;6305:22:108;;;6287:41;;6388:4;6376:17;;;6370:24;6366:33;;6344:20;;;6337:63;6448:17;;;6442:24;6438:33;6416:20;;;6409:63;;;;6532:4;6520:17;;;6514:24;6540:10;6510:41;6488:20;;;6481:71;;;;6236:3;6221:19;2232:235:85;6042:516:108;7070:104:86;;;:::i;731:44:94:-;;;:::i;10988:175:86:-;;;;;;:::i;:::-;;:::i;11973:348::-;;;;;;:::i;:::-;;:::i;2473:211:85:-;;;;;;:::i;:::-;;:::i;11197:184:86:-;;;;;;:::i;:::-;;:::i;4119:474:85:-;;;;;;:::i;:::-;;:::i;4968:535::-;;;;;;:::i;:::-;;:::i;3099:633::-;;;;;;:::i;:::-;;:::i;5723:360:86:-;5824:4;-1:-1:-1;;;;;;;;;5859:25:86;;;;:100;;-1:-1:-1;;;;;;;;;;5934:25:86;;;5859:100;:175;;;-1:-1:-1;;;;;;;;;;6009:25:86;;;5859:175;5840:194;5723:360;-1:-1:-1;;5723:360:86:o;6818:100::-;6874:13;6906:5;6899:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6818:100;:::o;10773:181::-;10863:7;10882:23;10897:7;10882:14;:23::i;:::-;-1:-1:-1;10923:24:86;;;;:15;:24;;;;;;-1:-1:-1;;;;;10923:24:86;;10773:181::o;9797:416::-;9877:13;9893:28;9913:7;9893:19;:28::i;:::-;9877:44;;9941:5;-1:-1:-1;;;;;9935:11:86;:2;-1:-1:-1;;;;;9935:11:86;;9931:83;;9969:34;;-1:-1:-1;;;9969:34:86;;;;;;;;;;;9931:83;10028:10;-1:-1:-1;;;;;10028:19:86;;;;;;:59;;;10052:35;10069:5;10076:10;10052:16;:35::i;:::-;10051:36;10028:59;10024:151;;;10110:54;;-1:-1:-1;;;10110:54:86;;;;;;;;;;;10024:151;10185:21;10194:2;10198:7;10185:8;:21::i;:::-;9867:346;9797:416;;:::o;11415:309::-;11551:39;11570:10;11582:7;11551:18;:39::i;:::-;11546:133;;11613:55;;-1:-1:-1;;;11613:55:86;;;;;;;;;;;11546:133;11689:28;11699:4;11705:2;11709:7;11689:9;:28::i;5265:105::-;5332:31;5355:7;5332:22;:31::i;:::-;5265:105;:::o;11758:181::-;11893:39;11910:4;11916:2;11920:7;11893:39;;;;;;;;;;;;:16;:39::i;4766:317::-;4834:36;4873:4;-1:-1:-1;;;;;4873:25:86;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4834:66;-1:-1:-1;4914:10:86;-1:-1:-1;;;;;4914:40:86;;;4910:112;;4977:34;;-1:-1:-1;;;4977:34:86;;;;;;;;;;;4910:112;5032:44;5065:10;5032:32;:44::i;:::-;4824:259;4766:317;:::o;4521:239::-;3257:19:24;3280:13;;;;;;3279:14;;3325:34;;;;-1:-1:-1;3343:12:24;;3358:1;3343:12;;;;:16;3325:34;3324:97;;;-1:-1:-1;3393:4:24;1465:19:35;:23;;;3365:55:24;;-1:-1:-1;3403:12:24;;;;;:17;3365:55;3303:190;;;;-1:-1:-1;;;3303:190:24;;;;;;;:::i;:::-;;;;;;;;;3503:12;:16;;-1:-1:-1;;3503:16:24;3518:1;3503:16;;;3529:65;;;;3563:13;:20;;-1:-1:-1;;3563:20:24;;;;;3529:65;4709:5:86::1;:15;4717:7:::0;4709:5;:15:::1;:::i;:::-;-1:-1:-1::0;4734:7:86::1;:19;4744:9:::0;4734:7;:19:::1;:::i;:::-;;3618:14:24::0;3614:99;;;3664:5;3648:21;;-1:-1:-1;;3648:21:24;;;3688:14;;-1:-1:-1;12177:36:108;;3688:14:24;;12165:2:108;12150:18;3688:14:24;;;;;;;3247:472;4521:239:86;;:::o;400:122:94:-;447:19;489:26;751:20:96;745:27;;618:170;489:26:94;482:33;;400:122;:::o;6117:259:86:-;6203:7;5656:27:85;;;:18;:27;;;;;:38;;;-1:-1:-1;;;;;5656:38:85;;6265:83:86;;6311:26;;-1:-1:-1;;;6311:26:86;;;;;;;;;;;10252:212;10379:15;10416:41;10428:10;10440:6;10448:8;10416:11;:41::i;:::-;10406:51;10252:212;-1:-1:-1;;;;10252:212:86:o;2232:235:85:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2433:27:85;;;;:18;:27;;;;;;;;;2422:38;;;;;;;;;-1:-1:-1;;;;;2422:38:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2422:38:85;;;;;;;;;2232:235::o;7070:104:86:-;7128:13;7160:7;7153:14;;;;;:::i;731:44:94:-;3257:19:24;3280:13;;;;;;3279:14;;3325:34;;;;-1:-1:-1;3343:12:24;;3358:1;3343:12;;;;:16;3325:34;3324:97;;;-1:-1:-1;3393:4:24;1465:19:35;:23;;;3365:55:24;;-1:-1:-1;3403:12:24;;;;;:17;3365:55;3303:190;;;;-1:-1:-1;;;3303:190:24;;;;;;;:::i;:::-;3503:12;:16;;-1:-1:-1;;3503:16:24;3518:1;3503:16;;;3529:65;;;;3563:13;:20;;-1:-1:-1;;3563:20:24;;;;;3529:65;3618:14;3614:99;;;3664:5;3648:21;;-1:-1:-1;;3648:21:24;;;3688:14;;-1:-1:-1;12177:36:108;;3688:14:24;;12165:2:108;12150:18;3688:14:24;;;;;;;;3247:472;731:44:94:o;10988:175:86:-;11106:50;11125:10;11137:8;11147;11106:18;:50::i;11973:348::-;12138:39;12157:10;12169:7;12138:18;:39::i;:::-;12133:133;;12200:55;;-1:-1:-1;;;12200:55:86;;;;;;;;;;;12133:133;12276:38;12290:4;12296:2;12300:7;12309:4;12276:13;:38::i;:::-;11973:348;;;;:::o;2473:211:85:-;2616:13;2652:25;2662:7;2671:5;2652:9;:25::i;11197:184:86:-;-1:-1:-1;;;;;11339:25:86;;;11316:4;11339:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;11197:184::o;4119:474:85:-;7965:10;-1:-1:-1;;;;;7987:26:85;7965:49;;7961:117;;8037:30;;-1:-1:-1;;;8037:30:85;;;;;;;;;;;7961:117;4276:15:::1;4294:104;4327:10;4352;4376:12;4294:11;:104::i;:::-;4462:1;4412:27:::0;;;:18:::1;:27;::::0;;;;:38:::1;;::::0;4276:122;;-1:-1:-1;;;;;;4412:38:85::1;:52:::0;4408:179:::1;;4480:31;4503:7;4480:22;:31::i;:::-;4526:50;::::0;-1:-1:-1;;;4526:50:85;;::::1;::::0;::::1;5290:25:108::0;;;4526:19:85::1;-1:-1:-1::0;;;;;4526:41:85::1;::::0;::::1;::::0;5263:18:108;;4526:50:85::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;4266:327;4119:474:::0;;;:::o;4968:535::-;7965:10;-1:-1:-1;;;;;7987:26:85;7965:49;;7961:117;;8037:30;;-1:-1:-1;;;8037:30:85;;;;;;;;;;;7961:117;5125:15:::1;5143:104;5176:10;5201;5225:12;5143:11;:104::i;:::-;5311:1;5261:27:::0;;;:18:::1;:27;::::0;;;;:38:::1;;::::0;5125:122;;-1:-1:-1;;;;;;5261:38:85::1;:52:::0;5257:240:::1;;5424:33;::::0;-1:-1:-1;;;5424:33:85;;::::1;::::0;::::1;5290:25:108::0;;;5424:19:85::1;-1:-1:-1::0;;;;;5424:24:85::1;::::0;::::1;::::0;5263:18:108;;5424:33:85::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;5472:14;5478:7;5472:5;:14::i;3099:633::-:0;7965:10;-1:-1:-1;;;;;7987:26:85;7965:49;;7961:117;;8037:30;;-1:-1:-1;;;8037:30:85;;;;;;;;;;;7961:117;3376:18:::1;3397:104;3430:10;3455;3479:12;3397:11;:104::i;:::-;3568:1;3515:30:::0;;;:18:::1;:30;::::0;;;;:41:::1;;::::0;3376:125;;-1:-1:-1;;;;;;3515:41:85::1;3511:215;;3586:64;3600:10;3613;3625:12;3639:10;3586:5;:64::i;:::-;3665:50;::::0;-1:-1:-1;;;3665:50:85;;-1:-1:-1;;;;;12416:32:108;;;3665:50:85::1;::::0;::::1;12398:51:108::0;12465:18;;;12458:34;;;3665:19:85::1;:24;::::0;::::1;::::0;12371:18:108;;3665:50:85::1;12224:274:108::0;13046:128:86;13690:4;5656:27:85;;;:18;:27;;;;;:38;;;-1:-1:-1;;;;;5656:38:85;13111:56:86;;13141:26;;-1:-1:-1;;;13141:26:86;;;;;;;;;;;13866:158;13932:24;;;;:15;:24;;;;;;;;:29;;-1:-1:-1;;;;;;13932:29:86;-1:-1:-1;;;;;13932:29:86;;;;;;;;;5656:18:85;:27;;;;;;-1:-1:-1;5656:38:85;;13977:40:86;;13932:24;;5656:38:85;;;;;13977:40:86;;;13866:158;;:::o;12617:304::-;12724:4;12740:13;12756:28;12776:7;12756:19;:28::i;:::-;12740:44;;12813:5;-1:-1:-1;;;;;12802:16:86;:7;-1:-1:-1;;;;;12802:16:86;;:64;;;;12834:32;12851:5;12858:7;12834:16;:32::i;:::-;12802:111;;;;12906:7;-1:-1:-1;;;;;12882:31:86;:20;12894:7;12882:11;:20::i;:::-;-1:-1:-1;;;;;12882:31:86;;12794:120;12617:304;-1:-1:-1;;;;12617:304:86:o;5841:186:85:-;5987:33;;-1:-1:-1;;;5987:33:85;;;;;;;;;;;13757:103:86;13830:23;;5290:25:108;;;13830:23:86;;5278:2:108;5263:18;13830:23:86;5144:177:108;1289:576:94;1457:1;1419:26;751:20:96;745:27;;618:170;1419:26:94;-1:-1:-1;;;;;1419:40:94;;1411:82;;;;-1:-1:-1;;;1411:82:94;;12705:2:108;1411:82:94;;;12687:21:108;12744:2;12724:18;;;12717:30;12783:31;12763:18;;;12756:59;12832:18;;1411:82:94;12503:353:108;1411:82:94;1557:10;-1:-1:-1;;;;;1543:39:94;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1935:109:85;1524:60:94;1503:142;;;;-1:-1:-1;;;1503:142:94;;13252:2:108;1503:142:94;;;13234:21:108;13291:2;13271:18;;;13264:30;13330:34;13310:18;;;13303:62;-1:-1:-1;;;13381:18:108;;;13374:33;13424:19;;1503:142:94;13050:399:108;1503:142:94;-1:-1:-1;;;;;1676:27:94;;1684:4;1676:27;1655:99;;;;-1:-1:-1;;;1655:99:94;;13656:2:108;1655:99:94;;;13638:21:108;13695:2;13675:18;;;13668:30;13734:27;13714:18;;;13707:55;13779:18;;1655:99:94;13454:349:108;1655:99:94;1764:39;1792:10;988:20:96;964:87;839:228;1764:39:94;1818:40;1935:109:85;1818:40:94;;;13982:25:108;;;-1:-1:-1;;;;;14043:32:108;;14038:2;14023:18;;14016:60;13955:18;1818:40:94;13808:274:108;10470:269:86;10666:55;;;10677:13;10666:55;;;;14318:25:108;;;;-1:-1:-1;;;;;14417:15:108;;;14397:18;;;14390:43;14469:15;;;14449:18;;;14442:43;14521:15;;;;14501:18;;;;14494:43;;;;10666:55:86;;;;;;;;;;14290:19:108;;;;10666:55:86;;;10656:66;;;;;;10470:269::o;14030:303::-;14168:8;-1:-1:-1;;;;;14159:17:86;:5;-1:-1:-1;;;;;14159:17:86;;14155:57;;14185:27;;-1:-1:-1;;;14185:27:86;;;;;;;;;;;14155:57;-1:-1:-1;;;;;14223:25:86;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;14223:46:86;;;;;;;;;;14285:41;;445::108;;;14285::86;;418:18:108;14285:41:86;;;;;;;14030:303;;;:::o;15097:188::-;15250:28;15260:4;15266:2;15270:7;15250:9;:28::i;7497:776::-;7601:13;7626:27;7656:26;7674:7;7656:17;:26::i;:::-;7725:19;;7848;;;;7881:21;;;;;7781:131;;-1:-1:-1;;;7781:131:86;;-1:-1:-1;;;;;14827:15:108;;;7781:131:86;;;14809:34:108;14879:15;;;14859:18;;;14852:43;14931:15;;;14911:18;;;14904:43;7725:19:86;;-1:-1:-1;7725:19:86;;7693:17;;7781:26;:34;;;;14744:18:108;;7781:131:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7756:156;;;;;8004:8;8034:24;8050:7;8034:15;:24::i;:::-;8114:36;8129:8;8114:25;;:34;:36::i;:::-;8207:8;:27;;;;;;;;;;;;;;;-1:-1:-1;;;8207:27:86;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8207:27:86;;;;7966:286;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7923:343;;;;;7497:776;;;;:::o;7572:343:85:-;7632:13;7648:28;7668:7;7648:19;:28::i;:::-;15529:24:86;;;;:15;:24;;;;;15522:31;;-1:-1:-1;;;;;;15522:31:86;;;7632:44:85;-1:-1:-1;7778:27:85;;;;:18;:27;;;;;;7771:34;;-1:-1:-1;;;;;;7771:34:85;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;7771:34:85;;;7872:36;7797:7;;7778:27;-1:-1:-1;;;;;7872:36:85;;;;;7778:27;;7872:36;7622:293;7572:343;:::o;6527:825::-;-1:-1:-1;;;;;6685:24:85;;6681:92;;6732:30;;-1:-1:-1;;;6732:30:85;;;;;;;;;;;6681:92;6801:12;-1:-1:-1;;;;;6787:26:85;:10;-1:-1:-1;;;;;6787:26:85;;6783:104;;6836:40;;-1:-1:-1;;;6836:40:85;;;;;;;;;;;6783:104;13690:4:86;5656:27:85;;;:18;:27;;;;;:38;;;-1:-1:-1;;;;;5656:38:85;13713:31:86;6897:87:85;;6943:30;;-1:-1:-1;;;6943:30:85;;;;;;;;;;;6897:87;7078:149;;;;;;;;-1:-1:-1;;;;;7078:149:85;;;;;;;;;;;;;;;;;;;;;;;;;7184:15;7078:149;;;;;;;;-1:-1:-1;7045:30:85;;;:18;:30;;;;;;:182;;;;;;;-1:-1:-1;;;;;;7045:182:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;7045:182:85;-1:-1:-1;;;;;;7045:182:85;;;;;;;;;;;;;;;;;;7301:44;;7064:10;;7078:149;-1:-1:-1;7301:44:85;;-1:-1:-1;;7301:44:85;6527:825;;;;:::o;8279:1484:86:-;8358:13;8383:27;8413:26;8431:7;8413:17;:26::i;:::-;8383:56;;8738:132;8799:8;:19;;;-1:-1:-1;;;;;8783:37:86;8846:2;8738:19;:132::i;:::-;8926:24;:13;:22;:24::i;:::-;9022:8;:19;;;-1:-1:-1;;;;;9010:39:86;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9010:41:86;;;;;;;;;;;;:::i;:::-;9105:132;9166:8;:19;;;-1:-1:-1;;;;;9150:37:86;9213:2;9105:19;:132::i;:::-;9293:134;9354:8;:21;;;-1:-1:-1;;;;;9338:39:86;9403:2;9293:19;:134::i;:::-;9489:88;9509:8;:19;;;-1:-1:-1;;;;;9497:41:86;;:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9489:52;;:86;:88::i;:::-;9682:42;9690:8;:22;;;9682:31;;:40;:42::i;:::-;8661:1081;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8618:1138;;;8279:1484;;;:::o;415:696:37:-;471:13;520:14;537:17;548:5;537:10;:17::i;:::-;557:1;537:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;595:18:37;-1:-1:-1;572:41:37;-1:-1:-1;733:28:37;;;749:2;733:28;788:280;-1:-1:-1;;819:5:37;-1:-1:-1;;;953:2:37;942:14;;937:30;819:5;924:44;1012:2;1003:11;;;-1:-1:-1;1032:21:37;788:280;1032:21;-1:-1:-1;1088:6:37;415:696;-1:-1:-1;;;415:696:37:o;1513:437::-;1588:13;1613:19;1645:10;1649:6;1645:1;:10;:::i;:::-;:14;;1658:1;1645:14;:::i;:::-;1635:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1635:25:37;;1613:47;;-1:-1:-1;;;1670:6:37;1677:1;1670:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1670:15:37;;;;;;;;;-1:-1:-1;;;1695:6:37;1702:1;1695:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1695:15:37;;;;;;;;-1:-1:-1;1725:9:37;1737:10;1741:6;1737:1;:10;:::i;:::-;:14;;1750:1;1737:14;:::i;:::-;1725:26;;1720:128;1757:1;1753;:5;1720:128;;;-1:-1:-1;;;1800:5:37;1808:3;1800:11;1791:21;;;;;;;:::i;:::-;;;;1779:6;1786:1;1779:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;1779:33:37;;;;;;;;-1:-1:-1;1836:1:37;1826:11;;;;;1760:3;;;:::i;:::-;;;1720:128;;;-1:-1:-1;1865:10:37;;1857:55;;;;-1:-1:-1;;;1857:55:37;;21626:2:108;1857:55:37;;;21608:21:108;;;21645:18;;;21638:30;21704:34;21684:18;;;21677:62;21756:18;;1857:55:37;21424:356:108;1857:55:37;1936:6;1513:437;-1:-1:-1;;;1513:437:37:o;9889:890:41:-;9942:7;;-1:-1:-1;;;10017:15:41;;10013:99;;-1:-1:-1;;;10052:15:41;;;-1:-1:-1;10095:2:41;10085:12;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;-1:-1:-1;10207:2:41;10197:12;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;-1:-1:-1;10319:2:41;10309:12;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;-1:-1:-1;10429:1:41;10419:11;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;-1:-1:-1;10538:1:41;10528:11;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;-1:-1:-1;10647:1:41;10637:11;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;10766:6;9889:890;-1:-1:-1;;9889:890:41:o;14:286:108:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:108;;209:43;;199:71;;266:1;263;256:12;497:250;582:1;592:113;606:6;603:1;600:13;592:113;;;682:11;;;676:18;663:11;;;656:39;628:2;621:10;592:113;;;-1:-1:-1;;739:1:108;721:16;;714:27;497:250::o;752:396::-;901:2;890:9;883:21;864:4;933:6;927:13;976:6;971:2;960:9;956:18;949:34;992:79;1064:6;1059:2;1048:9;1044:18;1039:2;1031:6;1027:15;992:79;:::i;:::-;1132:2;1111:15;-1:-1:-1;;1107:29:108;1092:45;;;;1139:2;1088:54;;752:396;-1:-1:-1;;752:396:108:o;1153:180::-;1212:6;1265:2;1253:9;1244:7;1240:23;1236:32;1233:52;;;1281:1;1278;1271:12;1233:52;-1:-1:-1;1304:23:108;;1153:180;-1:-1:-1;1153:180:108:o;1546:131::-;-1:-1:-1;;;;;1621:31:108;;1611:42;;1601:70;;1667:1;1664;1657:12;1682:315;1750:6;1758;1811:2;1799:9;1790:7;1786:23;1782:32;1779:52;;;1827:1;1824;1817:12;1779:52;1866:9;1853:23;1885:31;1910:5;1885:31;:::i;:::-;1935:5;1987:2;1972:18;;;;1959:32;;-1:-1:-1;;;1682:315:108:o;2244:456::-;2321:6;2329;2337;2390:2;2378:9;2369:7;2365:23;2361:32;2358:52;;;2406:1;2403;2396:12;2358:52;2445:9;2432:23;2464:31;2489:5;2464:31;:::i;:::-;2514:5;-1:-1:-1;2571:2:108;2556:18;;2543:32;2584:33;2543:32;2584:33;:::i;:::-;2244:456;;2636:7;;-1:-1:-1;;;2690:2:108;2675:18;;;;2662:32;;2244:456::o;2705:247::-;2764:6;2817:2;2805:9;2796:7;2792:23;2788:32;2785:52;;;2833:1;2830;2823:12;2785:52;2872:9;2859:23;2891:31;2916:5;2891:31;:::i;3422:127::-;3483:10;3478:3;3474:20;3471:1;3464:31;3514:4;3511:1;3504:15;3538:4;3535:1;3528:15;3554:275;3625:2;3619:9;3690:2;3671:13;;-1:-1:-1;;3667:27:108;3655:40;;3725:18;3710:34;;3746:22;;;3707:62;3704:88;;;3772:18;;:::i;:::-;3808:2;3801:22;3554:275;;-1:-1:-1;3554:275:108:o;3834:187::-;3883:4;3916:18;3908:6;3905:30;3902:56;;;3938:18;;:::i;:::-;-1:-1:-1;4004:2:108;3983:15;-1:-1:-1;;3979:29:108;4010:4;3975:40;;3834:187::o;4026:338::-;4091:5;4120:53;4136:36;4165:6;4136:36;:::i;:::-;4120:53;:::i;:::-;4111:62;;4196:6;4189:5;4182:21;4236:3;4227:6;4222:3;4218:16;4215:25;4212:45;;;4253:1;4250;4243:12;4212:45;4302:6;4297:3;4290:4;4283:5;4279:16;4266:43;4356:1;4349:4;4340:6;4333:5;4329:18;4325:29;4318:40;4026:338;;;;;:::o;4369:222::-;4412:5;4465:3;4458:4;4450:6;4446:17;4442:27;4432:55;;4483:1;4480;4473:12;4432:55;4505:80;4581:3;4572:6;4559:20;4552:4;4544:6;4540:17;4505:80;:::i;4596:543::-;4684:6;4692;4745:2;4733:9;4724:7;4720:23;4716:32;4713:52;;;4761:1;4758;4751:12;4713:52;4801:9;4788:23;4830:18;4871:2;4863:6;4860:14;4857:34;;;4887:1;4884;4877:12;4857:34;4910:50;4952:7;4943:6;4932:9;4928:22;4910:50;:::i;:::-;4900:60;;5013:2;5002:9;4998:18;4985:32;4969:48;;5042:2;5032:8;5029:16;5026:36;;;5058:1;5055;5048:12;5026:36;;5081:52;5125:7;5114:8;5103:9;5099:24;5081:52;:::i;:::-;5071:62;;;4596:543;;;;;:::o;5508:529::-;5585:6;5593;5601;5654:2;5642:9;5633:7;5629:23;5625:32;5622:52;;;5670:1;5667;5660:12;5622:52;5709:9;5696:23;5728:31;5753:5;5728:31;:::i;:::-;5778:5;-1:-1:-1;5835:2:108;5820:18;;5807:32;5848:33;5807:32;5848:33;:::i;:::-;5900:7;-1:-1:-1;5959:2:108;5944:18;;5931:32;5972:33;5931:32;5972:33;:::i;:::-;6024:7;6014:17;;;5508:529;;;;;:::o;6563:416::-;6628:6;6636;6689:2;6677:9;6668:7;6664:23;6660:32;6657:52;;;6705:1;6702;6695:12;6657:52;6744:9;6731:23;6763:31;6788:5;6763:31;:::i;:::-;6813:5;-1:-1:-1;6870:2:108;6855:18;;6842:32;6912:15;;6905:23;6893:36;;6883:64;;6943:1;6940;6933:12;6883:64;6966:7;6956:17;;;6563:416;;;;;:::o;6984:795::-;7079:6;7087;7095;7103;7156:3;7144:9;7135:7;7131:23;7127:33;7124:53;;;7173:1;7170;7163:12;7124:53;7212:9;7199:23;7231:31;7256:5;7231:31;:::i;:::-;7281:5;-1:-1:-1;7338:2:108;7323:18;;7310:32;7351:33;7310:32;7351:33;:::i;:::-;7403:7;-1:-1:-1;7457:2:108;7442:18;;7429:32;;-1:-1:-1;7512:2:108;7497:18;;7484:32;7539:18;7528:30;;7525:50;;;7571:1;7568;7561:12;7525:50;7594:22;;7647:4;7639:13;;7635:27;-1:-1:-1;7625:55:108;;7676:1;7673;7666:12;7625:55;7699:74;7765:7;7760:2;7747:16;7742:2;7738;7734:11;7699:74;:::i;:::-;7689:84;;;6984:795;;;;;;;:::o;7784:388::-;7852:6;7860;7913:2;7901:9;7892:7;7888:23;7884:32;7881:52;;;7929:1;7926;7919:12;7881:52;7968:9;7955:23;7987:31;8012:5;7987:31;:::i;:::-;8037:5;-1:-1:-1;8094:2:108;8079:18;;8066:32;8107:33;8066:32;8107:33;:::i;8737:380::-;8816:1;8812:12;;;;8859;;;8880:61;;8934:4;8926:6;8922:17;8912:27;;8880:61;8987:2;8979:6;8976:14;8956:18;8953:38;8950:161;;9033:10;9028:3;9024:20;9021:1;9014:31;9068:4;9065:1;9058:15;9096:4;9093:1;9086:15;8950:161;;8737:380;;;:::o;9122:279::-;9220:6;9273:2;9261:9;9252:7;9248:23;9244:32;9241:52;;;9289:1;9286;9279:12;9241:52;9321:9;9315:16;9340:31;9365:5;9340:31;:::i;9406:410::-;9608:2;9590:21;;;9647:2;9627:18;;;9620:30;9686:34;9681:2;9666:18;;9659:62;-1:-1:-1;;;9752:2:108;9737:18;;9730:44;9806:3;9791:19;;9406:410::o;9947:545::-;10049:2;10044:3;10041:11;10038:448;;;10085:1;10110:5;10106:2;10099:17;10155:4;10151:2;10141:19;10225:2;10213:10;10209:19;10206:1;10202:27;10196:4;10192:38;10261:4;10249:10;10246:20;10243:47;;;-1:-1:-1;10284:4:108;10243:47;10339:2;10334:3;10330:12;10327:1;10323:20;10317:4;10313:31;10303:41;;10394:82;10412:2;10405:5;10402:13;10394:82;;;10457:17;;;10438:1;10427:13;10394:82;;;10398:3;;;9947:545;;;:::o;10668:1352::-;10794:3;10788:10;10821:18;10813:6;10810:30;10807:56;;;10843:18;;:::i;:::-;10872:97;10962:6;10922:38;10954:4;10948:11;10922:38;:::i;:::-;10916:4;10872:97;:::i;:::-;11024:4;;11088:2;11077:14;;11105:1;11100:663;;;;11807:1;11824:6;11821:89;;;-1:-1:-1;11876:19:108;;;11870:26;11821:89;-1:-1:-1;;10625:1:108;10621:11;;;10617:24;10613:29;10603:40;10649:1;10645:11;;;10600:57;11923:81;;11070:944;;11100:663;9894:1;9887:14;;;9931:4;9918:18;;-1:-1:-1;;11136:20:108;;;11254:236;11268:7;11265:1;11262:14;11254:236;;;11357:19;;;11351:26;11336:42;;11449:27;;;;11417:1;11405:14;;;;11284:19;;11254:236;;;11258:3;11518:6;11509:7;11506:19;11503:201;;;11579:19;;;11573:26;-1:-1:-1;;11662:1:108;11658:14;;;11674:3;11654:24;11650:37;11646:42;11631:58;11616:74;;11503:201;-1:-1:-1;;;;;11750:1:108;11734:14;;;11730:22;11717:36;;-1:-1:-1;10668:1352:108:o;12861:184::-;12931:6;12984:2;12972:9;12963:7;12959:23;12955:32;12952:52;;;13000:1;12997;12990:12;12952:52;-1:-1:-1;13023:16:108;;12861:184;-1:-1:-1;12861:184:108:o;14958:462::-;15053:6;15061;15069;15077;15130:3;15118:9;15109:7;15105:23;15101:33;15098:53;;;15147:1;15144;15137:12;15098:53;15176:9;15170:16;15160:26;;15229:2;15218:9;15214:18;15208:25;15277:5;15273:2;15262:21;15255:5;15252:32;15242:60;;15298:1;15295;15288:12;15242:60;15366:2;15351:18;;15345:25;15410:2;15395:18;;;15389:25;14958:462;;15321:5;;-1:-1:-1;14958:462:108;-1:-1:-1;;;14958:462:108:o;15425:198::-;15467:3;15505:5;15499:12;15520:65;15578:6;15573:3;15566:4;15559:5;15555:16;15520:65;:::i;:::-;15601:16;;;;;15425:198;-1:-1:-1;;15425:198:108:o;15758:1466::-;16232:3;16261:1;16294:6;16288:13;16324:36;16350:9;16324:36;:::i;:::-;16379:1;16396:18;;;16423:133;;;;16570:1;16565:356;;;;16389:532;;16423:133;-1:-1:-1;;16456:24:108;;16444:37;;16529:14;;16522:22;16510:35;;16501:45;;;-1:-1:-1;16423:133:108;;16565:356;16596:6;16593:1;16586:17;16626:4;16671:2;16668:1;16658:16;16696:1;16710:165;16724:6;16721:1;16718:13;16710:165;;;16802:14;;16789:11;;;16782:35;16845:16;;;;16739:10;;16710:165;;;16714:3;;;16904:6;16899:3;16895:16;16888:23;;16389:532;;;;;16952:6;16946:13;16968:68;17027:8;17022:3;17015:4;17007:6;17003:17;16968:68;:::i;:::-;-1:-1:-1;;;17055:18:108;;17082:24;;;17122:96;17148:69;17178:38;17212:2;17204:11;;17196:6;17178:38;:::i;:::-;-1:-1:-1;;;15693:26:108;;15744:2;15735:12;;15628:125;17148:69;17140:6;17122:96;:::i;:::-;17115:103;15758:1466;-1:-1:-1;;;;;;;15758:1466:108:o;17229:649::-;17309:6;17362:2;17350:9;17341:7;17337:23;17333:32;17330:52;;;17378:1;17375;17368:12;17330:52;17411:9;17405:16;17444:18;17436:6;17433:30;17430:50;;;17476:1;17473;17466:12;17430:50;17499:22;;17552:4;17544:13;;17540:27;-1:-1:-1;17530:55:108;;17581:1;17578;17571:12;17530:55;17610:2;17604:9;17635:49;17651:32;17680:2;17651:32;:::i;17635:49::-;17707:2;17700:5;17693:17;17747:7;17742:2;17737;17733;17729:11;17725:20;17722:33;17719:53;;;17768:1;17765;17758:12;17719:53;17781:67;17845:2;17840;17833:5;17829:14;17824:2;17820;17816:11;17781:67;:::i;:::-;17867:5;17229:649;-1:-1:-1;;;;;17229:649:108:o;17883:273::-;17951:6;18004:2;17992:9;17983:7;17979:23;17975:32;17972:52;;;18020:1;18017;18010:12;17972:52;18052:9;18046:16;18102:4;18095:5;18091:16;18084:5;18081:27;18071:55;;18122:1;18119;18112:12;18427:2152;-1:-1:-1;;;19578:3:108;19571:30;19553:3;19630:6;19624:13;19646:75;19714:6;19709:2;19704:3;19700:12;19693:4;19685:6;19681:17;19646:75;:::i;:::-;-1:-1:-1;;;19780:2:108;19740:16;;;19772:11;;;19765:33;19823:13;;19845:76;19823:13;19907:2;19899:11;;19892:4;19880:17;;19845:76;:::i;:::-;-1:-1:-1;;;19981:2:108;19940:17;;;;19973:11;;;19966:37;20028:13;;20050:76;20028:13;20112:2;20104:11;;20097:4;20085:17;;20050:76;:::i;:::-;-1:-1:-1;;;20186:2:108;20145:17;;;;20178:11;;;20171:31;20227:13;;20249:76;20227:13;20311:2;20303:11;;20296:4;20284:17;;20249:76;:::i;:::-;-1:-1:-1;;;20385:2:108;20344:17;;;;20377:11;;;20370:33;20419:154;20445:127;20475:96;20501:69;20531:38;20565:2;20557:11;;20549:6;20531:38;:::i;:::-;-1:-1:-1;;;18226:31:108;;18282:2;18273:12;;18161:130;20501:69;20493:6;20475:96;:::i;:::-;-1:-1:-1;;;18361:27:108;;18413:2;18404:12;;18296:126;20419:154;20412:161;18427:2152;-1:-1:-1;;;;;;;;;;18427:2152:108:o;20716:127::-;20777:10;20772:3;20768:20;20765:1;20758:31;20808:4;20805:1;20798:15;20832:4;20829:1;20822:15;20848:168;20921:9;;;20952;;20969:15;;;20963:22;;20949:37;20939:71;;20990:18;;:::i;21021:125::-;21086:9;;;21107:10;;;21104:36;;;21120:18;;:::i;21151:127::-;21212:10;21207:3;21203:20;21200:1;21193:31;21243:4;21240:1;21233:15;21267:4;21264:1;21257:15;21283:136;21322:3;21350:5;21340:39;;21359:18;;:::i;:::-;-1:-1:-1;;;21395:18:108;;21283:136::o",
    "linkReferences": {},
    "immutableReferences": {
      "55320": [
        {
          "start": 714,
          "length": 32
        },
        {
          "start": 2775,
          "length": 32
        },
        {
          "start": 3025,
          "length": 32
        },
        {
          "start": 3304,
          "length": 32
        }
      ],
      "55717": [
        {
          "start": 560,
          "length": 32
        },
        {
          "start": 2634,
          "length": 32
        },
        {
          "start": 2893,
          "length": 32
        },
        {
          "start": 3145,
          "length": 32
        },
        {
          "start": 4576,
          "length": 32
        }
      ],
      "55721": [
        {
          "start": 675,
          "length": 32
        },
        {
          "start": 1619,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "CONSTANT_FLOW_AGREEMENT_V1()": "18156101",
    "CONSTANT_INFLOW_NFT()": "4c5c0c85",
    "HOST()": "49f289dc",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "castrate()": "9903ad38",
    "flowDataByTokenId(uint256)": "8d47859e",
    "getApproved(uint256)": "081812fc",
    "getCodeAddress()": "50d75d25",
    "getTokenId(address,address,address)": "89f71d2d",
    "initialize(string,string)": "4cd88b76",
    "isApprovedForAll(address,address)": "e985e9c5",
    "name()": "06fdde03",
    "onCreate(address,address,address)": "f7e3d983",
    "onDelete(address,address,address)": "ef1f0237",
    "onUpdate(address,address,address)": "eb54a7ca",
    "ownerOf(uint256)": "6352211e",
    "proxiableUUID()": "52d1902d",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "transferFrom(address,address,uint256)": "23b872dd",
    "triggerMetadataUpdate(uint256)": "2f388560",
    "updateCode(address)": "46951954"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract IConstantInflowNFT\",\"name\":\"constantInflowNFT\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_INVALID_SUPER_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_MINT_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_ONLY_CONSTANT_INFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_ONLY_FLOW_AGREEMENTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_TOKEN_ALREADY_EXISTS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"codeAddress\",\"type\":\"address\"}],\"name\":\"CodeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONSTANT_FLOW_AGREEMENT_V1\",\"outputs\":[{\"internalType\":\"contract IConstantFlowAgreementV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONSTANT_INFLOW_NFT\",\"outputs\":[{\"internalType\":\"contract IConstantInflowNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOST\",\"outputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"castrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCodeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"codeAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onDelete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"details\":\"This contract uses mint/burn interface for flow creation/deletion and holds the actual storage for both NFTs.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"We always return 1 to avoid the need for additional mapping\",\"returns\":{\"balance\":\"= 1\"}},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getCodeAddress()\":{\"details\":\"Get current implementation code address.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"tokenId\":\"the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Should follow the naming convention: TOKENx Constant Outflow/Inflow NFT\",\"returns\":{\"_0\":\"name of the NFT\"}},\"onCreate(address,address,address)\":{\"details\":\"This function mints the COF NFT to the flow sender and mints the CIF NFT to the flow receiver\",\"params\":{\"flowReceiver\":\"the flow receiver NOTE: We do an existence check in here to determine whether or not to execute the hook\",\"flowSender\":\"the flow sender\",\"superToken\":\"the SuperToken contract address\"}},\"onDelete(address,address,address)\":{\"details\":\"This function burns the COF NFT and burns the CIF NFT\",\"params\":{\"flowReceiver\":\"the flow receiver NOTE: We do an existence check in here to determine whether or not to execute the hook\",\"flowSender\":\"the flow sender\",\"superToken\":\"the SuperToken contract address\"}},\"onUpdate(address,address,address)\":{\"details\":\"This function triggers the metadata update of both COF and CIF NFTs\",\"params\":{\"flowReceiver\":\"the flow receiver NOTE: We do an existence check in here to determine whether or not to execute the hook\",\"flowSender\":\"the flow sender\",\"superToken\":\"the SuperToken contract address\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"proxiableUUID()\":{\"details\":\"Proxiable UUID marker function, this would help to avoid wrong logic      contract to be used for upgrading. NOTE: The semantics of the UUID deviates from the actual UUPS standard,       where it is equivalent of _IMPLEMENTATION_SLOT.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"This is part of the Standard Interface Detection EIP: https://eips.ethereum.org/EIPS/eip-165\",\"params\":{\"interfaceId\":\"the XOR of all function selectors in the interface\"},\"returns\":{\"_0\":\"boolean true if the interface is supported\"}},\"symbol()\":{\"details\":\"Should follow the naming convention: TOKENx(COF/CIF)\",\"returns\":{\"_0\":\"symbol of the NFT\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"triggerMetadataUpdate(uint256)\":{\"details\":\"Callable by anyone.\",\"params\":{\"tokenId\":\"the token id to trigger a metaupdate for\"}}},\"stateVariables\":{\"_flowDataByTokenId\":{\"details\":\"The token id is uint256(keccak256(abi.encode(flowSender, flowReceiver)))\"}},\"title\":\"ConstantOutflowNFT contract (COF NFT)\",\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"CONSTANT_FLOW_AGREEMENT_V1()\":{\"notice\":\"ConstantFlowAgreementV1 contract address\"},\"HOST()\":{\"notice\":\"Superfluid host contract address\"},\"balanceOf(address)\":{\"notice\":\"Returns a hardcoded balance of 1\"},\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"},\"name()\":{\"notice\":\"Returns the name of the NFT\"},\"onCreate(address,address,address)\":{\"notice\":\"Hook called by CFA contract on flow creation\"},\"onDelete(address,address,address)\":{\"notice\":\"Hook called by CFA contract on flow deletion\"},\"onUpdate(address,address,address)\":{\"notice\":\"Hook called by CFA contract on flow update\"},\"supportsInterface(bytes4)\":{\"notice\":\"This contract supports IERC165, IERC721 and IERC721Metadata\"},\"symbol()\":{\"notice\":\"Returns the symbol of the NFT\"},\"triggerMetadataUpdate(uint256)\":{\"notice\":\"Emits the MetadataUpdate event with `tokenId` as the argument.\"}},\"notice\":\"The ConstantOutflowNFT contract to be minted to the flow sender on flow creation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@superfluid-finance/ethereum-contracts/contracts/superfluid/ConstantOutflowNFT.sol\":\"ConstantOutflowNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@superfluid-finance/ethereum-contracts/contracts/=node_modules/@superfluid-finance/ethereum-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0d26b5d0495ffb4c36b1abdf003f43ab478c324752ce60847af8019bad5a3ad0\",\"dweb:/ipfs/QmQGcXZcq7eBrZUyxLbHFkBFWCyMwFonvJwLRSsL82dbWx\"]},\"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x3798da9e212cd00a7cda94ddb5a9721171a718e89c500d8901f810e0e37fa74e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a93f9c584e4b29dce1c7520b63d19f34c684f5ea972b5d04323a132059851004\",\"dweb:/ipfs/QmajmiA7BsarS63FMoP5PcBS4mqVGoiJ7xZ3wJVonYNTHC\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"node_modules/@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x385a7061f1436b079d44c140dee9387d5313e94874ff9ee877dc0085c981ac3d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c3fe22bb0d9527356e11f267f9187134de4d4ed1ff77468b4d73e3238697b96\",\"dweb:/ipfs/Qmc8caJctgxbzXEpxRogQMR2bnBk5U67hA7kKbUEG2PUXV\"]},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634\",\"dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb\"]},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"node_modules/@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b\",\"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"keccak256\":\"0xb68e122faba133422f4cbdd7e15fc913073dfa2c3682c18d6449b121e67d1104\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://da0611fda964b8356d38cb006133865b58adc6e11d3817e27daf20b02ad6880f\",\"dweb:/ipfs/QmeLbak3yiUfkGvxEZzmS4ndDwDfxtZNeKiA86G3WxzjyD\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x8c817a6d85868039485ecdf1c7163f2e06be939cfc3923ba4ca6628f614282a1\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://d3e816400006db8e39faf5287f76da1785060f7a21c68103453bb37f18ba6db0\",\"dweb:/ipfs/Qmbnd8TktXALrsngVNAHR546YJgnJ47tffkPug1j4jitDu\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0xb989f0fe54561ecb32f66ac55427d98866c77ee4b6a1da52aca2e0953a7f7f06\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://049ca939f07e24558748ebacc6f17c3e72161c16516e77bf9d501c338b3dd7b4\",\"dweb:/ipfs/QmVVbywb88aaiKLzs75zz5tbkPptrm2ihki8jGrn232jW2\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x5df423f453923ff6f7ee716e7c1c64d2e19743ad77455b0bba23fd28f2a9d587\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://191e99e332eee5c9b4a7ee19648e44554d9fe34c6c93be9fc2d2cbf9fbc1997a\",\"dweb:/ipfs/QmcxN6M6WAhmso9Yevag419p6tDNjJH3DJqbWdBurc4o8J\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0x1c62c63f39c7c9ba03ddde542690ccfea343b5b3b442ed4cf2830b43af6f9cbe\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://e3ef914d4089c070d1f48b8d292a360d05373e5454ab45d6bef3d8b5170c3885\",\"dweb:/ipfs/QmZcXa9CfuaCxDfp8ncip6oAY849HFzDJ8rnMN8roSLvnk\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x3a93bb86598d8840dc333efce41c0fcc8b839df6597c3be49dcb4e3d4fb9f074\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://469e7af1687de706da737007596663e20ec634d7ac6daa032be8c263e57eb518\",\"dweb:/ipfs/QmSQtjPankaurKEbKrf2M1bLe3TaPFvdHxUdmaRYgZ4TG4\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x5555e072e755dea4ffcd4c0c74d8ca8e7f782d462e049c8eb09171b0edc38394\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://25b7c8e97377da22641038a58b1f05a719634241887839874191012a203dbfcf\",\"dweb:/ipfs/QmbvMjTbm4gpPaxSBGetBYSJs2SQesAzjEp66F9w8JoZhG\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0x9b4fab6dcac1337f78e04d67d8c2b48b1de8bd4bbf14b475840f9dbda7b8f21e\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://cc2f3629ad0cb46bd4f595880591ad6c9d75a82d920cb9355e462fbf8022c820\",\"dweb:/ipfs/QmXMovxK4qpWT4yffXxUVjkMNwxEfS6mtn39mLSmjaxEdW\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0x0182f29b230b034686dc505935ca0a1635fc537274bb592393a6e259010be08b\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://6c728b787a7575bbfab0e6c24b18ccd29e457f5797611027af3f8ca664e94dcc\",\"dweb:/ipfs/QmXxAWjWjLdEdZQVAJyEYcBtiZBdNK7c5CfDC5UjaN3yZQ\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xc179b68b0641e7fa8873d77a4f3bb1116533e5da1120683fe5ee4bb6419d38d2\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://b888e81e39cc519e56ac10553756c059e18cbea45debb7113c6a1c86008a96c6\",\"dweb:/ipfs/QmWeWRsF52zk122qmxjpVePSRvdXjfDZzDY1ucdFtDMEjh\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0xac57bbc7e9432bf926d4f9913b71301b18b4519de12e22892ebbc646d43b88c5\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://4a18f0c241ee2236bc5ec588718601242cec0b20fb9f3d432272264f2330dd36\",\"dweb:/ipfs/QmSjhobAGMzCqpyf1oWXjGF6bH8RwWVcKYT9oRDLAWUEi3\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0xab9dab941f99d0f0ef6125fb6eafde03378d7c3e94e613dd12fb7fbf594c3373\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://928c6ef915dee69058d4cfcb9f2344d4fc78d9763b47b17e5c03fbff64ba3c64\",\"dweb:/ipfs/Qmdk733ZHceatz3qbuodLCCS9TUspJJtXLoX6vWwMvrPDE\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x90a9259d0f0bb6b1bb6d48f051277eb75df96a9fbe684a203a3a468ad19318e2\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://9c8162a2d07ffe768920fef55292684149173afefbfba76b8fca007e55092229\",\"dweb:/ipfs/QmducLNwrzeUXEpBjUTSMu7sfmQEwVhcYXApe4brc1zQ6V\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0x9cad3866982902ea88df0874a563d2e4aeba5a5bcc6289c30cccf9b4099d2fb6\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://e8fd960b259331f204c7cb7dcd32b09d68f4294e3b872fad00ad467609c3ef72\",\"dweb:/ipfs/QmeZFEvsDunXQGPbXFfN5AvfKM5am1FY8Xv6e3c4tNKvgY\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0x55be78ffb441c782f612b153d7d9049e3f0dbfd412c1f7df29c896b972b2985f\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://a223c68e38a6c9b1e363e525911bc7eda44ea517865ae53bd0d34ff858cc02ae\",\"dweb:/ipfs/QmVruGehibG6Emr2A6JHwUnhd4NzsGkE24cbGqnDpEvrKh\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x7456cd394cc905aae7cdbd4601ce1c296c768c13c28e66efbb913cc070bad3e4\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://5a6589b428b724721ba5b4dd196c8f366a6e694ef313add093f29af64496c042\",\"dweb:/ipfs/QmSMgV6y8L6pyyzDz6kKmafVwujNWcjTqutpCBxe4uNRqg\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/superfluid/ConstantOutflowNFT.sol\":{\"keccak256\":\"0xe021036be9660ad6d119683d092e1116200656788f4f7ed52caeb627764443d4\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://2376c0ce6d35ba71bc3c098f1a6e3a820043bc300901e136bd4913760940d7b3\",\"dweb:/ipfs/QmdWUeYMr1zt5wf4KH8QZrm66hcnTYSkQP3VEKkNGsgE6W\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/superfluid/FlowNFTBase.sol\":{\"keccak256\":\"0x9c94add8ad61c67af3117de4c87a7a7d9cf96b45da5c259e7747f173a4d625ac\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://e44e1f7d7c8880ffeea6bd3419f91610bd76d2f524d2efaf358adbc93b621a47\",\"dweb:/ipfs/QmZPCwkMhduohyse2C9cnGK4P5Wy1TiAdwny1diZmfJb3g\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSProxiable.sol\":{\"keccak256\":\"0x5727ab9e11a1d76b9bde364a4239b9401d8afff8c9a6f7a9bc822b5413d0cf7a\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://6bd4990aa1eb94065fcca64dc94b3493729d7407ed834106ac44c5ad25fa6953\",\"dweb:/ipfs/QmSeU3GAYTJA948HjygmpmJ1avRwGg5zJQXsGWeYrow4sp\"]},\"node_modules/@superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSUtils.sol\":{\"keccak256\":\"0x507b0157775ffc422aee1010ab640f019dc8d653e88db6ef3c57c6486f593dc6\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://a9b9c00cf8285e748baca7e61f29313965ea77342c50c31f426cd8af4b0be238\",\"dweb:/ipfs/QmWg34M9kVrXLBpwPguoyr178oZabaqRQogJebTLJp98ud\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract ISuperfluid",
              "name": "host",
              "type": "address"
            },
            {
              "internalType": "contract IConstantInflowNFT",
              "name": "constantInflowNFT",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_APPROVE_TO_CALLER"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_INVALID_TOKEN_ID"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "COF_NFT_INVALID_SUPER_TOKEN"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "COF_NFT_MINT_TO_ZERO_ADDRESS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "COF_NFT_ONLY_CONSTANT_INFLOW"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "COF_NFT_ONLY_FLOW_AGREEMENTS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "COF_NFT_TOKEN_ALREADY_EXISTS"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uuid",
              "type": "bytes32",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "codeAddress",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CodeUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "MetadataUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "CONSTANT_FLOW_AGREEMENT_V1",
          "outputs": [
            {
              "internalType": "contract IConstantFlowAgreementV1",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "CONSTANT_INFLOW_NFT",
          "outputs": [
            {
              "internalType": "contract IConstantInflowNFT",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "HOST",
          "outputs": [
            {
              "internalType": "contract ISuperfluid",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "castrate"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "flowDataByTokenId",
          "outputs": [
            {
              "internalType": "struct IFlowNFTBase.FlowNFTData",
              "name": "flowData",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "superToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "flowSender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "flowReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "flowStartDate",
                  "type": "uint32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getCodeAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "codeAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTokenId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "nftName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "nftSymbol",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract ISuperfluidToken",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowReceiver",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onCreate"
        },
        {
          "inputs": [
            {
              "internalType": "contract ISuperfluidToken",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowReceiver",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onDelete"
        },
        {
          "inputs": [
            {
              "internalType": "contract ISuperfluidToken",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowReceiver",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onUpdate"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "proxiableUUID",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "triggerMetadataUpdate"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateCode"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
          },
          "balanceOf(address)": {
            "details": "We always return 1 to avoid the need for additional mapping",
            "returns": {
              "balance": "= 1"
            }
          },
          "flowDataByTokenId(uint256)": {
            "params": {
              "tokenId": "the token id"
            },
            "returns": {
              "flowData": "the flow data associated with `tokenId`"
            }
          },
          "getApproved(uint256)": {
            "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "getCodeAddress()": {
            "details": "Get current implementation code address."
          },
          "getTokenId(address,address,address)": {
            "details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
            "params": {
              "flowReceiver": "the flow receiver",
              "flowSender": "the flow sender",
              "superToken": "the super token"
            },
            "returns": {
              "tokenId": "the tokenId"
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
          },
          "name()": {
            "details": "Should follow the naming convention: TOKENx Constant Outflow/Inflow NFT",
            "returns": {
              "_0": "name of the NFT"
            }
          },
          "onCreate(address,address,address)": {
            "details": "This function mints the COF NFT to the flow sender and mints the CIF NFT to the flow receiver",
            "params": {
              "flowReceiver": "the flow receiver NOTE: We do an existence check in here to determine whether or not to execute the hook",
              "flowSender": "the flow sender",
              "superToken": "the SuperToken contract address"
            }
          },
          "onDelete(address,address,address)": {
            "details": "This function burns the COF NFT and burns the CIF NFT",
            "params": {
              "flowReceiver": "the flow receiver NOTE: We do an existence check in here to determine whether or not to execute the hook",
              "flowSender": "the flow sender",
              "superToken": "the SuperToken contract address"
            }
          },
          "onUpdate(address,address,address)": {
            "details": "This function triggers the metadata update of both COF and CIF NFTs",
            "params": {
              "flowReceiver": "the flow receiver NOTE: We do an existence check in here to determine whether or not to execute the hook",
              "flowSender": "the flow sender",
              "superToken": "the SuperToken contract address"
            }
          },
          "ownerOf(uint256)": {
            "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "proxiableUUID()": {
            "details": "Proxiable UUID marker function, this would help to avoid wrong logic      contract to be used for upgrading. NOTE: The semantics of the UUID deviates from the actual UUPS standard,       where it is equivalent of _IMPLEMENTATION_SLOT."
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "setApprovalForAll(address,bool)": {
            "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
          },
          "supportsInterface(bytes4)": {
            "details": "This is part of the Standard Interface Detection EIP: https://eips.ethereum.org/EIPS/eip-165",
            "params": {
              "interfaceId": "the XOR of all function selectors in the interface"
            },
            "returns": {
              "_0": "boolean true if the interface is supported"
            }
          },
          "symbol()": {
            "details": "Should follow the naming convention: TOKENx(COF/CIF)",
            "returns": {
              "_0": "symbol of the NFT"
            }
          },
          "transferFrom(address,address,uint256)": {
            "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
          },
          "triggerMetadataUpdate(uint256)": {
            "details": "Callable by anyone.",
            "params": {
              "tokenId": "the token id to trigger a metaupdate for"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "CONSTANT_FLOW_AGREEMENT_V1()": {
            "notice": "ConstantFlowAgreementV1 contract address"
          },
          "HOST()": {
            "notice": "Superfluid host contract address"
          },
          "balanceOf(address)": {
            "notice": "Returns a hardcoded balance of 1"
          },
          "flowDataByTokenId(uint256)": {
            "notice": "An external function for querying flow data by `tokenId``"
          },
          "getTokenId(address,address,address)": {
            "notice": "An external function for computing the deterministic tokenId"
          },
          "name()": {
            "notice": "Returns the name of the NFT"
          },
          "onCreate(address,address,address)": {
            "notice": "Hook called by CFA contract on flow creation"
          },
          "onDelete(address,address,address)": {
            "notice": "Hook called by CFA contract on flow deletion"
          },
          "onUpdate(address,address,address)": {
            "notice": "Hook called by CFA contract on flow update"
          },
          "supportsInterface(bytes4)": {
            "notice": "This contract supports IERC165, IERC721 and IERC721Metadata"
          },
          "symbol()": {
            "notice": "Returns the symbol of the NFT"
          },
          "triggerMetadataUpdate(uint256)": {
            "notice": "Emits the MetadataUpdate event with `tokenId` as the argument."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@superfluid-finance/ethereum-contracts/contracts/=node_modules/@superfluid-finance/ethereum-contracts/contracts/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "node_modules/@superfluid-finance/ethereum-contracts/contracts/superfluid/ConstantOutflowNFT.sol": "ConstantOutflowNFT"
      },
      "libraries": {}
    },
    "sources": {
      "node_modules/@openzeppelin/contracts/interfaces/IERC20Metadata.sol": {
        "keccak256": "0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516",
        "urls": [
          "bzz-raw://0d26b5d0495ffb4c36b1abdf003f43ab478c324752ce60847af8019bad5a3ad0",
          "dweb:/ipfs/QmQGcXZcq7eBrZUyxLbHFkBFWCyMwFonvJwLRSsL82dbWx"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0x3798da9e212cd00a7cda94ddb5a9721171a718e89c500d8901f810e0e37fa74e",
        "urls": [
          "bzz-raw://a93f9c584e4b29dce1c7520b63d19f34c684f5ea972b5d04323a132059851004",
          "dweb:/ipfs/QmajmiA7BsarS63FMoP5PcBS4mqVGoiJ7xZ3wJVonYNTHC"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
        "urls": [
          "bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
          "dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68",
        "urls": [
          "bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56",
          "dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
        "urls": [
          "bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
          "dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC777/IERC777.sol": {
        "keccak256": "0x385a7061f1436b079d44c140dee9387d5313e94874ff9ee877dc0085c981ac3d",
        "urls": [
          "bzz-raw://1c3fe22bb0d9527356e11f267f9187134de4d4ed1ff77468b4d73e3238697b96",
          "dweb:/ipfs/Qmc8caJctgxbzXEpxRogQMR2bnBk5U67hA7kKbUEG2PUXV"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Address.sol": {
        "keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
        "urls": [
          "bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
          "dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
        "keccak256": "0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a",
        "urls": [
          "bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634",
          "dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
        "keccak256": "0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6",
        "urls": [
          "bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b",
          "dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz"
        ],
        "license": "MIT"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
        "keccak256": "0xb68e122faba133422f4cbdd7e15fc913073dfa2c3682c18d6449b121e67d1104",
        "urls": [
          "bzz-raw://da0611fda964b8356d38cb006133865b58adc6e11d3817e27daf20b02ad6880f",
          "dweb:/ipfs/QmeLbak3yiUfkGvxEZzmS4ndDwDfxtZNeKiA86G3WxzjyD"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
        "keccak256": "0x8c817a6d85868039485ecdf1c7163f2e06be939cfc3923ba4ca6628f614282a1",
        "urls": [
          "bzz-raw://d3e816400006db8e39faf5287f76da1785060f7a21c68103453bb37f18ba6db0",
          "dweb:/ipfs/Qmbnd8TktXALrsngVNAHR546YJgnJ47tffkPug1j4jitDu"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol": {
        "keccak256": "0xb989f0fe54561ecb32f66ac55427d98866c77ee4b6a1da52aca2e0953a7f7f06",
        "urls": [
          "bzz-raw://049ca939f07e24558748ebacc6f17c3e72161c16516e77bf9d501c338b3dd7b4",
          "dweb:/ipfs/QmVVbywb88aaiKLzs75zz5tbkPptrm2ihki8jGrn232jW2"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol": {
        "keccak256": "0x5df423f453923ff6f7ee716e7c1c64d2e19743ad77455b0bba23fd28f2a9d587",
        "urls": [
          "bzz-raw://191e99e332eee5c9b4a7ee19648e44554d9fe34c6c93be9fc2d2cbf9fbc1997a",
          "dweb:/ipfs/QmcxN6M6WAhmso9Yevag419p6tDNjJH3DJqbWdBurc4o8J"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol": {
        "keccak256": "0x1c62c63f39c7c9ba03ddde542690ccfea343b5b3b442ed4cf2830b43af6f9cbe",
        "urls": [
          "bzz-raw://e3ef914d4089c070d1f48b8d292a360d05373e5454ab45d6bef3d8b5170c3885",
          "dweb:/ipfs/QmZcXa9CfuaCxDfp8ncip6oAY849HFzDJ8rnMN8roSLvnk"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol": {
        "keccak256": "0x3a93bb86598d8840dc333efce41c0fcc8b839df6597c3be49dcb4e3d4fb9f074",
        "urls": [
          "bzz-raw://469e7af1687de706da737007596663e20ec634d7ac6daa032be8c263e57eb518",
          "dweb:/ipfs/QmSQtjPankaurKEbKrf2M1bLe3TaPFvdHxUdmaRYgZ4TG4"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol": {
        "keccak256": "0x5555e072e755dea4ffcd4c0c74d8ca8e7f782d462e049c8eb09171b0edc38394",
        "urls": [
          "bzz-raw://25b7c8e97377da22641038a58b1f05a719634241887839874191012a203dbfcf",
          "dweb:/ipfs/QmbvMjTbm4gpPaxSBGetBYSJs2SQesAzjEp66F9w8JoZhG"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
        "keccak256": "0x9b4fab6dcac1337f78e04d67d8c2b48b1de8bd4bbf14b475840f9dbda7b8f21e",
        "urls": [
          "bzz-raw://cc2f3629ad0cb46bd4f595880591ad6c9d75a82d920cb9355e462fbf8022c820",
          "dweb:/ipfs/QmXMovxK4qpWT4yffXxUVjkMNwxEfS6mtn39mLSmjaxEdW"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
        "keccak256": "0x0182f29b230b034686dc505935ca0a1635fc537274bb592393a6e259010be08b",
        "urls": [
          "bzz-raw://6c728b787a7575bbfab0e6c24b18ccd29e457f5797611027af3f8ca664e94dcc",
          "dweb:/ipfs/QmXxAWjWjLdEdZQVAJyEYcBtiZBdNK7c5CfDC5UjaN3yZQ"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
        "keccak256": "0xc179b68b0641e7fa8873d77a4f3bb1116533e5da1120683fe5ee4bb6419d38d2",
        "urls": [
          "bzz-raw://b888e81e39cc519e56ac10553756c059e18cbea45debb7113c6a1c86008a96c6",
          "dweb:/ipfs/QmWeWRsF52zk122qmxjpVePSRvdXjfDZzDY1ucdFtDMEjh"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
        "keccak256": "0xac57bbc7e9432bf926d4f9913b71301b18b4519de12e22892ebbc646d43b88c5",
        "urls": [
          "bzz-raw://4a18f0c241ee2236bc5ec588718601242cec0b20fb9f3d432272264f2330dd36",
          "dweb:/ipfs/QmSjhobAGMzCqpyf1oWXjGF6bH8RwWVcKYT9oRDLAWUEi3"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
        "keccak256": "0xab9dab941f99d0f0ef6125fb6eafde03378d7c3e94e613dd12fb7fbf594c3373",
        "urls": [
          "bzz-raw://928c6ef915dee69058d4cfcb9f2344d4fc78d9763b47b17e5c03fbff64ba3c64",
          "dweb:/ipfs/Qmdk733ZHceatz3qbuodLCCS9TUspJJtXLoX6vWwMvrPDE"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
        "keccak256": "0x90a9259d0f0bb6b1bb6d48f051277eb75df96a9fbe684a203a3a468ad19318e2",
        "urls": [
          "bzz-raw://9c8162a2d07ffe768920fef55292684149173afefbfba76b8fca007e55092229",
          "dweb:/ipfs/QmducLNwrzeUXEpBjUTSMu7sfmQEwVhcYXApe4brc1zQ6V"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
        "keccak256": "0x9cad3866982902ea88df0874a563d2e4aeba5a5bcc6289c30cccf9b4099d2fb6",
        "urls": [
          "bzz-raw://e8fd960b259331f204c7cb7dcd32b09d68f4294e3b872fad00ad467609c3ef72",
          "dweb:/ipfs/QmeZFEvsDunXQGPbXFfN5AvfKM5am1FY8Xv6e3c4tNKvgY"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
        "keccak256": "0x55be78ffb441c782f612b153d7d9049e3f0dbfd412c1f7df29c896b972b2985f",
        "urls": [
          "bzz-raw://a223c68e38a6c9b1e363e525911bc7eda44ea517865ae53bd0d34ff858cc02ae",
          "dweb:/ipfs/QmVruGehibG6Emr2A6JHwUnhd4NzsGkE24cbGqnDpEvrKh"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
        "keccak256": "0x7456cd394cc905aae7cdbd4601ce1c296c768c13c28e66efbb913cc070bad3e4",
        "urls": [
          "bzz-raw://5a6589b428b724721ba5b4dd196c8f366a6e694ef313add093f29af64496c042",
          "dweb:/ipfs/QmSMgV6y8L6pyyzDz6kKmafVwujNWcjTqutpCBxe4uNRqg"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/superfluid/ConstantOutflowNFT.sol": {
        "keccak256": "0xe021036be9660ad6d119683d092e1116200656788f4f7ed52caeb627764443d4",
        "urls": [
          "bzz-raw://2376c0ce6d35ba71bc3c098f1a6e3a820043bc300901e136bd4913760940d7b3",
          "dweb:/ipfs/QmdWUeYMr1zt5wf4KH8QZrm66hcnTYSkQP3VEKkNGsgE6W"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/superfluid/FlowNFTBase.sol": {
        "keccak256": "0x9c94add8ad61c67af3117de4c87a7a7d9cf96b45da5c259e7747f173a4d625ac",
        "urls": [
          "bzz-raw://e44e1f7d7c8880ffeea6bd3419f91610bd76d2f524d2efaf358adbc93b621a47",
          "dweb:/ipfs/QmZPCwkMhduohyse2C9cnGK4P5Wy1TiAdwny1diZmfJb3g"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSProxiable.sol": {
        "keccak256": "0x5727ab9e11a1d76b9bde364a4239b9401d8afff8c9a6f7a9bc822b5413d0cf7a",
        "urls": [
          "bzz-raw://6bd4990aa1eb94065fcca64dc94b3493729d7407ed834106ac44c5ad25fa6953",
          "dweb:/ipfs/QmSeU3GAYTJA948HjygmpmJ1avRwGg5zJQXsGWeYrow4sp"
        ],
        "license": "AGPLv3"
      },
      "node_modules/@superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSUtils.sol": {
        "keccak256": "0x507b0157775ffc422aee1010ab640f019dc8d653e88db6ef3c57c6486f593dc6",
        "urls": [
          "bzz-raw://a9b9c00cf8285e748baca7e61f29313965ea77342c50c31f426cd8af4b0be238",
          "dweb:/ipfs/QmWg34M9kVrXLBpwPguoyr178oZabaqRQogJebTLJp98ud"
        ],
        "license": "AGPLv3"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "node_modules/@superfluid-finance/ethereum-contracts/contracts/superfluid/ConstantOutflowNFT.sol",
    "id": 55684,
    "exportedSymbols": {
      "ConstantOutflowNFT": [
        55683
      ],
      "FlowNFTBase": [
        56528
      ],
      "IConstantFlowAgreementV1": [
        51249
      ],
      "IConstantInflowNFT": [
        52163
      ],
      "IConstantOutflowNFT": [
        52217
      ],
      "IERC721Metadata": [
        31355
      ],
      "IFlowNFTBase": [
        52291
      ],
      "ISuperfluid": [
        53566
      ],
      "ISuperfluidToken": [
        53981
      ],
      "UUPSProxiable": [
        63404
      ]
    },
    "nodeType": "SourceUnit",
    "src": "71:8027:85",
    "nodes": [
      {
        "id": 55295,
        "nodeType": "PragmaDirective",
        "src": "71:23:85",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 55297,
        "nodeType": "ImportDirective",
        "src": "96:106:85",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55684,
        "sourceUnit": 31356,
        "symbolAliases": [
          {
            "foreign": {
              "id": 55296,
              "name": "IERC721Metadata",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 31355,
              "src": "109:15:85",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 55299,
        "nodeType": "ImportDirective",
        "src": "203:85:85",
        "nodes": [],
        "absolutePath": "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
        "file": "../interfaces/superfluid/ISuperfluidToken.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55684,
        "sourceUnit": 53982,
        "symbolAliases": [
          {
            "foreign": {
              "id": 55298,
              "name": "ISuperfluidToken",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 53981,
              "src": "216:16:85",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 55301,
        "nodeType": "ImportDirective",
        "src": "289:101:85",
        "nodes": [],
        "absolutePath": "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
        "file": "../interfaces/agreements/IConstantFlowAgreementV1.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55684,
        "sourceUnit": 51250,
        "symbolAliases": [
          {
            "foreign": {
              "id": 55300,
              "name": "IConstantFlowAgreementV1",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 51249,
              "src": "302:24:85",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 55303,
        "nodeType": "ImportDirective",
        "src": "391:89:85",
        "nodes": [],
        "absolutePath": "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
        "file": "../interfaces/superfluid/IConstantInflowNFT.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55684,
        "sourceUnit": 52164,
        "symbolAliases": [
          {
            "foreign": {
              "id": 55302,
              "name": "IConstantInflowNFT",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 52163,
              "src": "404:18:85",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 55305,
        "nodeType": "ImportDirective",
        "src": "481:91:85",
        "nodes": [],
        "absolutePath": "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
        "file": "../interfaces/superfluid/IConstantOutflowNFT.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55684,
        "sourceUnit": 52218,
        "symbolAliases": [
          {
            "foreign": {
              "id": 55304,
              "name": "IConstantOutflowNFT",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 52217,
              "src": "494:19:85",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 55307,
        "nodeType": "ImportDirective",
        "src": "573:71:85",
        "nodes": [],
        "absolutePath": "node_modules/@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
        "file": "../interfaces/superfluid/ISuperfluid.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55684,
        "sourceUnit": 53567,
        "symbolAliases": [
          {
            "foreign": {
              "id": 55306,
              "name": "ISuperfluid",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 53566,
              "src": "582:11:85",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 55310,
        "nodeType": "ImportDirective",
        "src": "645:62:85",
        "nodes": [],
        "absolutePath": "node_modules/@superfluid-finance/ethereum-contracts/contracts/superfluid/FlowNFTBase.sol",
        "file": "./FlowNFTBase.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55684,
        "sourceUnit": 56529,
        "symbolAliases": [
          {
            "foreign": {
              "id": 55308,
              "name": "FlowNFTBase",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 56528,
              "src": "654:11:85",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 55309,
              "name": "IFlowNFTBase",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 52291,
              "src": "667:12:85",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 55312,
        "nodeType": "ImportDirective",
        "src": "708:67:85",
        "nodes": [],
        "absolutePath": "node_modules/@superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSProxiable.sol",
        "file": "../upgradability/UUPSProxiable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 55684,
        "sourceUnit": 63405,
        "symbolAliases": [
          {
            "foreign": {
              "id": 55311,
              "name": "UUPSProxiable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 63404,
              "src": "717:13:85",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 55683,
        "nodeType": "ContractDefinition",
        "src": "1062:7035:85",
        "nodes": [
          {
            "id": 55320,
            "nodeType": "VariableDeclaration",
            "src": "1132:55:85",
            "nodes": [],
            "constant": false,
            "functionSelector": "4c5c0c85",
            "mutability": "immutable",
            "name": "CONSTANT_INFLOW_NFT",
            "nameLocation": "1168:19:85",
            "scope": 55683,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IConstantInflowNFT_$52163",
              "typeString": "contract IConstantInflowNFT"
            },
            "typeName": {
              "id": 55319,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 55318,
                "name": "IConstantInflowNFT",
                "nameLocations": [
                  "1132:18:85"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 52163,
                "src": "1132:18:85"
              },
              "referencedDeclaration": 52163,
              "src": "1132:18:85",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IConstantInflowNFT_$52163",
                "typeString": "contract IConstantInflowNFT"
              }
            },
            "visibility": "public"
          },
          {
            "id": 55326,
            "nodeType": "VariableDeclaration",
            "src": "1443:59:85",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 55321,
              "nodeType": "StructuredDocumentation",
              "src": "1194:244:85",
              "text": "@notice A mapping from token id to FlowNFTData\n FlowNFTData: { address flowSender, uint32 flowStartDate, address flowReceiver, address superToken }\n @dev The token id is uint256(keccak256(abi.encode(flowSender, flowReceiver)))"
            },
            "mutability": "mutable",
            "name": "_flowDataByTokenId",
            "nameLocation": "1484:18:85",
            "scope": 55683,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$52234_storage_$",
              "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData)"
            },
            "typeName": {
              "id": 55325,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 55322,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1451:7:85",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1443:31:85",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$52234_storage_$",
                "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 55324,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 55323,
                  "name": "FlowNFTData",
                  "nameLocations": [
                    "1462:11:85"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 52234,
                  "src": "1462:11:85"
                },
                "referencedDeclaration": 52234,
                "src": "1462:11:85",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_FlowNFTData_$52234_storage_ptr",
                  "typeString": "struct IFlowNFTBase.FlowNFTData"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 55346,
            "nodeType": "FunctionDefinition",
            "src": "1558:204:85",
            "nodes": [],
            "body": {
              "id": 55345,
              "nodeType": "Block",
              "src": "1706:56:85",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 55343,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 55341,
                      "name": "CONSTANT_INFLOW_NFT",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 55320,
                      "src": "1716:19:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IConstantInflowNFT_$52163",
                        "typeString": "contract IConstantInflowNFT"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 55342,
                      "name": "constantInflowNFT",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 55332,
                      "src": "1738:17:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IConstantInflowNFT_$52163",
                        "typeString": "contract IConstantInflowNFT"
                      }
                    },
                    "src": "1716:39:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IConstantInflowNFT_$52163",
                      "typeString": "contract IConstantInflowNFT"
                    }
                  },
                  "id": 55344,
                  "nodeType": "ExpressionStatement",
                  "src": "1716:39:85"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 55337,
                    "name": "host",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 55329,
                    "src": "1691:4:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISuperfluid_$53566",
                      "typeString": "contract ISuperfluid"
                    }
                  },
                  {
                    "id": 55338,
                    "name": "baseURI",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 55334,
                    "src": "1697:7:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 55339,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 55336,
                  "name": "FlowNFTBase",
                  "nameLocations": [
                    "1679:11:85"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 56528,
                  "src": "1679:11:85"
                },
                "nodeType": "ModifierInvocation",
                "src": "1679:26:85"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 55335,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55329,
                  "mutability": "mutable",
                  "name": "host",
                  "nameLocation": "1591:4:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55346,
                  "src": "1579:16:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISuperfluid_$53566",
                    "typeString": "contract ISuperfluid"
                  },
                  "typeName": {
                    "id": 55328,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 55327,
                      "name": "ISuperfluid",
                      "nameLocations": [
                        "1579:11:85"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 53566,
                      "src": "1579:11:85"
                    },
                    "referencedDeclaration": 53566,
                    "src": "1579:11:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISuperfluid_$53566",
                      "typeString": "contract ISuperfluid"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55332,
                  "mutability": "mutable",
                  "name": "constantInflowNFT",
                  "nameLocation": "1624:17:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55346,
                  "src": "1605:36:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IConstantInflowNFT_$52163",
                    "typeString": "contract IConstantInflowNFT"
                  },
                  "typeName": {
                    "id": 55331,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 55330,
                      "name": "IConstantInflowNFT",
                      "nameLocations": [
                        "1605:18:85"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 52163,
                      "src": "1605:18:85"
                    },
                    "referencedDeclaration": 52163,
                    "src": "1605:18:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IConstantInflowNFT_$52163",
                      "typeString": "contract IConstantInflowNFT"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55334,
                  "mutability": "mutable",
                  "name": "baseURI",
                  "nameLocation": "1665:7:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55346,
                  "src": "1651:21:85",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 55333,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1651:6:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1569:109:85"
            },
            "returnParameters": {
              "id": 55340,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1706:0:85"
            },
            "scope": 55683,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 55357,
            "nodeType": "FunctionDefinition",
            "src": "1842:209:85",
            "nodes": [],
            "body": {
              "id": 55356,
              "nodeType": "Block",
              "src": "1906:145:85",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "6f72672e7375706572666c7569642d66696e616e63652e636f6e7472616374732e436f6e7374616e744f7574666c6f774e46542e696d706c656d656e746174696f6e",
                        "id": 55353,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1962:68:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b784",
                          "typeString": "literal_string \"org.superfluid-finance.contracts.ConstantOutflowNFT.implementation\""
                        },
                        "value": "org.superfluid-finance.contracts.ConstantOutflowNFT.implementation"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b784",
                          "typeString": "literal_string \"org.superfluid-finance.contracts.ConstantOutflowNFT.implementation\""
                        }
                      ],
                      "id": 55352,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "1935:9:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 55354,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1935:109:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 55351,
                  "id": 55355,
                  "nodeType": "Return",
                  "src": "1916:128:85"
                }
              ]
            },
            "baseFunctions": [
              63344
            ],
            "functionSelector": "52d1902d",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "proxiableUUID",
            "nameLocation": "1851:13:85",
            "overrides": {
              "id": 55348,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1879:8:85"
            },
            "parameters": {
              "id": 55347,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1864:2:85"
            },
            "returnParameters": {
              "id": 55351,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55350,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 55357,
                  "src": "1897:7:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 55349,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1897:7:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1896:9:85"
            },
            "scope": 55683,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 55376,
            "nodeType": "FunctionDefinition",
            "src": "2232:235:85",
            "nodes": [],
            "body": {
              "id": 55375,
              "nodeType": "Block",
              "src": "2412:55:85",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 55373,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 55369,
                      "name": "flowData",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 55367,
                      "src": "2422:8:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_FlowNFTData_$52234_memory_ptr",
                        "typeString": "struct IFlowNFTBase.FlowNFTData memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 55370,
                        "name": "_flowDataByTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55326,
                        "src": "2433:18:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$52234_storage_$",
                          "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData storage ref)"
                        }
                      },
                      "id": 55372,
                      "indexExpression": {
                        "id": 55371,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55360,
                        "src": "2452:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2433:27:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_FlowNFTData_$52234_storage",
                        "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                      }
                    },
                    "src": "2422:38:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FlowNFTData_$52234_memory_ptr",
                      "typeString": "struct IFlowNFTBase.FlowNFTData memory"
                    }
                  },
                  "id": 55374,
                  "nodeType": "ExpressionStatement",
                  "src": "2422:38:85"
                }
              ]
            },
            "baseFunctions": [
              52266,
              56480
            ],
            "documentation": {
              "id": 55358,
              "nodeType": "StructuredDocumentation",
              "src": "2057:170:85",
              "text": "@notice An external function for querying flow data by `tokenId``\n @param tokenId the token id\n @return flowData the flow data associated with `tokenId`"
            },
            "functionSelector": "8d47859e",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "flowDataByTokenId",
            "nameLocation": "2241:17:85",
            "overrides": {
              "id": 55364,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 55362,
                  "name": "FlowNFTBase",
                  "nameLocations": [
                    "2335:11:85"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 56528,
                  "src": "2335:11:85"
                },
                {
                  "id": 55363,
                  "name": "IFlowNFTBase",
                  "nameLocations": [
                    "2348:12:85"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 52291,
                  "src": "2348:12:85"
                }
              ],
              "src": "2326:35:85"
            },
            "parameters": {
              "id": 55361,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55360,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "2276:7:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55376,
                  "src": "2268:15:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 55359,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2268:7:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2258:31:85"
            },
            "returnParameters": {
              "id": 55368,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55367,
                  "mutability": "mutable",
                  "name": "flowData",
                  "nameLocation": "2398:8:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55376,
                  "src": "2379:27:85",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_FlowNFTData_$52234_memory_ptr",
                    "typeString": "struct IFlowNFTBase.FlowNFTData"
                  },
                  "typeName": {
                    "id": 55366,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 55365,
                      "name": "FlowNFTData",
                      "nameLocations": [
                        "2379:11:85"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 52234,
                      "src": "2379:11:85"
                    },
                    "referencedDeclaration": 52234,
                    "src": "2379:11:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FlowNFTData_$52234_storage_ptr",
                      "typeString": "struct IFlowNFTBase.FlowNFTData"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2378:29:85"
            },
            "scope": 55683,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 55392,
            "nodeType": "FunctionDefinition",
            "src": "2473:211:85",
            "nodes": [],
            "body": {
              "id": 55391,
              "nodeType": "Block",
              "src": "2635:49:85",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 55387,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55378,
                        "src": "2662:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 55388,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2671:5:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 55386,
                      "name": "_tokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 56020,
                      "src": "2652:9:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_bool_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256,bool) view returns (string memory)"
                      }
                    },
                    "id": 55389,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2652:25:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 55385,
                  "id": 55390,
                  "nodeType": "Return",
                  "src": "2645:32:85"
                }
              ]
            },
            "baseFunctions": [
              31354,
              55958
            ],
            "functionSelector": "c87b56dd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nameLocation": "2482:8:85",
            "overrides": {
              "id": 55382,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 55380,
                  "name": "FlowNFTBase",
                  "nameLocations": [
                    "2569:11:85"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 56528,
                  "src": "2569:11:85"
                },
                {
                  "id": 55381,
                  "name": "IERC721Metadata",
                  "nameLocations": [
                    "2582:15:85"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 31355,
                  "src": "2582:15:85"
                }
              ],
              "src": "2560:38:85"
            },
            "parameters": {
              "id": 55379,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55378,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "2508:7:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55392,
                  "src": "2500:15:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 55377,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2500:7:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2490:31:85"
            },
            "returnParameters": {
              "id": 55385,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55384,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 55392,
                  "src": "2616:13:85",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 55383,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2616:6:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2615:15:85"
            },
            "scope": 55683,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 55445,
            "nodeType": "FunctionDefinition",
            "src": "3099:633:85",
            "nodes": [],
            "body": {
              "id": 55444,
              "nodeType": "Block",
              "src": "3246:486:85",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    55406
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 55406,
                      "mutability": "mutable",
                      "name": "newTokenId",
                      "nameLocation": "3384:10:85",
                      "nodeType": "VariableDeclaration",
                      "scope": 55444,
                      "src": "3376:18:85",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 55405,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3376:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 55415,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 55410,
                            "name": "superToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55396,
                            "src": "3430:10:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ISuperfluidToken_$53981",
                              "typeString": "contract ISuperfluidToken"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_ISuperfluidToken_$53981",
                              "typeString": "contract ISuperfluidToken"
                            }
                          ],
                          "id": 55409,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3422:7:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 55408,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3422:7:85",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 55411,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3422:19:85",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 55412,
                        "name": "flowSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55398,
                        "src": "3455:10:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 55413,
                        "name": "flowReceiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55400,
                        "src": "3479:12:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 55407,
                      "name": "_getTokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 56208,
                      "src": "3397:11:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address,address,address) view returns (uint256)"
                      }
                    },
                    "id": 55414,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3397:104:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3376:125:85"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 55424,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 55416,
                          "name": "_flowDataByTokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55326,
                          "src": "3515:18:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$52234_storage_$",
                            "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData storage ref)"
                          }
                        },
                        "id": 55418,
                        "indexExpression": {
                          "id": 55417,
                          "name": "newTokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55406,
                          "src": "3534:10:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3515:30:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FlowNFTData_$52234_storage",
                          "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                        }
                      },
                      "id": 55419,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3546:10:85",
                      "memberName": "flowSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 52229,
                      "src": "3515:41:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 55422,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3568:1:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 55421,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "3560:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 55420,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3560:7:85",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 55423,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3560:10:85",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3515:55:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 55443,
                  "nodeType": "IfStatement",
                  "src": "3511:215:85",
                  "trueBody": {
                    "id": 55442,
                    "nodeType": "Block",
                    "src": "3572:154:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 55428,
                                  "name": "superToken",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 55396,
                                  "src": "3600:10:85",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ISuperfluidToken_$53981",
                                    "typeString": "contract ISuperfluidToken"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_ISuperfluidToken_$53981",
                                    "typeString": "contract ISuperfluidToken"
                                  }
                                ],
                                "id": 55427,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3592:7:85",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 55426,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3592:7:85",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 55429,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3592:19:85",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 55430,
                              "name": "flowSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55398,
                              "src": "3613:10:85",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 55431,
                              "name": "flowReceiver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55400,
                              "src": "3625:12:85",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 55432,
                              "name": "newTokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55406,
                              "src": "3639:10:85",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 55425,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55631,
                            "src": "3586:5:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,address,uint256)"
                            }
                          },
                          "id": 55433,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3586:64:85",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 55434,
                        "nodeType": "ExpressionStatement",
                        "src": "3586:64:85"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 55438,
                              "name": "flowReceiver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55400,
                              "src": "3690:12:85",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 55439,
                              "name": "newTokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55406,
                              "src": "3704:10:85",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 55435,
                              "name": "CONSTANT_INFLOW_NFT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55320,
                              "src": "3665:19:85",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IConstantInflowNFT_$52163",
                                "typeString": "contract IConstantInflowNFT"
                              }
                            },
                            "id": 55437,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3685:4:85",
                            "memberName": "mint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 52156,
                            "src": "3665:24:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 55440,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3665:50:85",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 55441,
                        "nodeType": "ExpressionStatement",
                        "src": "3665:50:85"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              52194
            ],
            "documentation": {
              "id": 55393,
              "nodeType": "StructuredDocumentation",
              "src": "2690:404:85",
              "text": "@notice Hook called by CFA contract on flow creation\n @dev This function mints the COF NFT to the flow sender and mints the CIF NFT to the flow receiver\n @param superToken the SuperToken contract address\n @param flowSender the flow sender\n @param flowReceiver the flow receiver\n NOTE: We do an existence check in here to determine whether or not to execute the hook"
            },
            "functionSelector": "f7e3d983",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 55403,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 55402,
                  "name": "onlyFlowAgreements",
                  "nameLocations": [
                    "3227:18:85"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 55682,
                  "src": "3227:18:85"
                },
                "nodeType": "ModifierInvocation",
                "src": "3227:18:85"
              }
            ],
            "name": "onCreate",
            "nameLocation": "3108:8:85",
            "parameters": {
              "id": 55401,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55396,
                  "mutability": "mutable",
                  "name": "superToken",
                  "nameLocation": "3143:10:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55445,
                  "src": "3126:27:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISuperfluidToken_$53981",
                    "typeString": "contract ISuperfluidToken"
                  },
                  "typeName": {
                    "id": 55395,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 55394,
                      "name": "ISuperfluidToken",
                      "nameLocations": [
                        "3126:16:85"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 53981,
                      "src": "3126:16:85"
                    },
                    "referencedDeclaration": 53981,
                    "src": "3126:16:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISuperfluidToken_$53981",
                      "typeString": "contract ISuperfluidToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55398,
                  "mutability": "mutable",
                  "name": "flowSender",
                  "nameLocation": "3171:10:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55445,
                  "src": "3163:18:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55397,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3163:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55400,
                  "mutability": "mutable",
                  "name": "flowReceiver",
                  "nameLocation": "3199:12:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55445,
                  "src": "3191:20:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55399,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3191:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3116:101:85"
            },
            "returnParameters": {
              "id": 55404,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3246:0:85"
            },
            "scope": 55683,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 55491,
            "nodeType": "FunctionDefinition",
            "src": "4119:474:85",
            "nodes": [],
            "body": {
              "id": 55490,
              "nodeType": "Block",
              "src": "4266:327:85",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    55459
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 55459,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "nameLocation": "4284:7:85",
                      "nodeType": "VariableDeclaration",
                      "scope": 55490,
                      "src": "4276:15:85",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 55458,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4276:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 55468,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 55463,
                            "name": "superToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55449,
                            "src": "4327:10:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ISuperfluidToken_$53981",
                              "typeString": "contract ISuperfluidToken"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_ISuperfluidToken_$53981",
                              "typeString": "contract ISuperfluidToken"
                            }
                          ],
                          "id": 55462,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4319:7:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 55461,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4319:7:85",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 55464,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4319:19:85",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 55465,
                        "name": "flowSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55451,
                        "src": "4352:10:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 55466,
                        "name": "flowReceiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55453,
                        "src": "4376:12:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 55460,
                      "name": "_getTokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 56208,
                      "src": "4294:11:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address,address,address) view returns (uint256)"
                      }
                    },
                    "id": 55467,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4294:104:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4276:122:85"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 55477,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 55469,
                          "name": "_flowDataByTokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55326,
                          "src": "4412:18:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$52234_storage_$",
                            "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData storage ref)"
                          }
                        },
                        "id": 55471,
                        "indexExpression": {
                          "id": 55470,
                          "name": "tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55459,
                          "src": "4431:7:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4412:27:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FlowNFTData_$52234_storage",
                          "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                        }
                      },
                      "id": 55472,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4440:10:85",
                      "memberName": "flowSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 52229,
                      "src": "4412:38:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 55475,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4462:1:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 55474,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "4454:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 55473,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4454:7:85",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 55476,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4454:10:85",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4412:52:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 55489,
                  "nodeType": "IfStatement",
                  "src": "4408:179:85",
                  "trueBody": {
                    "id": 55488,
                    "nodeType": "Block",
                    "src": "4466:121:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 55479,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55459,
                              "src": "4503:7:85",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 55478,
                            "name": "_triggerMetadataUpdate",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 56418,
                            "src": "4480:22:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 55480,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4480:31:85",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 55481,
                        "nodeType": "ExpressionStatement",
                        "src": "4480:31:85"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 55485,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55459,
                              "src": "4568:7:85",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 55482,
                              "name": "CONSTANT_INFLOW_NFT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55320,
                              "src": "4526:19:85",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IConstantInflowNFT_$52163",
                                "typeString": "contract IConstantInflowNFT"
                              }
                            },
                            "id": 55484,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4546:21:85",
                            "memberName": "triggerMetadataUpdate",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 52290,
                            "src": "4526:41:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) external"
                            }
                          },
                          "id": 55486,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4526:50:85",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 55487,
                        "nodeType": "ExpressionStatement",
                        "src": "4526:50:85"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              52205
            ],
            "documentation": {
              "id": 55446,
              "nodeType": "StructuredDocumentation",
              "src": "3738:376:85",
              "text": "@notice Hook called by CFA contract on flow update\n @dev This function triggers the metadata update of both COF and CIF NFTs\n @param superToken the SuperToken contract address\n @param flowSender the flow sender\n @param flowReceiver the flow receiver\n NOTE: We do an existence check in here to determine whether or not to execute the hook"
            },
            "functionSelector": "eb54a7ca",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 55456,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 55455,
                  "name": "onlyFlowAgreements",
                  "nameLocations": [
                    "4247:18:85"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 55682,
                  "src": "4247:18:85"
                },
                "nodeType": "ModifierInvocation",
                "src": "4247:18:85"
              }
            ],
            "name": "onUpdate",
            "nameLocation": "4128:8:85",
            "parameters": {
              "id": 55454,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55449,
                  "mutability": "mutable",
                  "name": "superToken",
                  "nameLocation": "4163:10:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55491,
                  "src": "4146:27:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISuperfluidToken_$53981",
                    "typeString": "contract ISuperfluidToken"
                  },
                  "typeName": {
                    "id": 55448,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 55447,
                      "name": "ISuperfluidToken",
                      "nameLocations": [
                        "4146:16:85"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 53981,
                      "src": "4146:16:85"
                    },
                    "referencedDeclaration": 53981,
                    "src": "4146:16:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISuperfluidToken_$53981",
                      "typeString": "contract ISuperfluidToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55451,
                  "mutability": "mutable",
                  "name": "flowSender",
                  "nameLocation": "4191:10:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55491,
                  "src": "4183:18:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55450,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4183:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55453,
                  "mutability": "mutable",
                  "name": "flowReceiver",
                  "nameLocation": "4219:12:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55491,
                  "src": "4211:20:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55452,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4211:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4136:101:85"
            },
            "returnParameters": {
              "id": 55457,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4266:0:85"
            },
            "scope": 55683,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 55537,
            "nodeType": "FunctionDefinition",
            "src": "4968:535:85",
            "nodes": [],
            "body": {
              "id": 55536,
              "nodeType": "Block",
              "src": "5115:388:85",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    55505
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 55505,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "nameLocation": "5133:7:85",
                      "nodeType": "VariableDeclaration",
                      "scope": 55536,
                      "src": "5125:15:85",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 55504,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5125:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 55514,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 55509,
                            "name": "superToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 55495,
                            "src": "5176:10:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ISuperfluidToken_$53981",
                              "typeString": "contract ISuperfluidToken"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_ISuperfluidToken_$53981",
                              "typeString": "contract ISuperfluidToken"
                            }
                          ],
                          "id": 55508,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5168:7:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 55507,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5168:7:85",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 55510,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5168:19:85",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 55511,
                        "name": "flowSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55497,
                        "src": "5201:10:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 55512,
                        "name": "flowReceiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55499,
                        "src": "5225:12:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 55506,
                      "name": "_getTokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 56208,
                      "src": "5143:11:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address,address,address) view returns (uint256)"
                      }
                    },
                    "id": 55513,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5143:104:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5125:122:85"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 55523,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 55515,
                          "name": "_flowDataByTokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55326,
                          "src": "5261:18:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$52234_storage_$",
                            "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData storage ref)"
                          }
                        },
                        "id": 55517,
                        "indexExpression": {
                          "id": 55516,
                          "name": "tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55505,
                          "src": "5280:7:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5261:27:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FlowNFTData_$52234_storage",
                          "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                        }
                      },
                      "id": 55518,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5289:10:85",
                      "memberName": "flowSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 52229,
                      "src": "5261:38:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 55521,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5311:1:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 55520,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "5303:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 55519,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5303:7:85",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 55522,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5303:10:85",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "5261:52:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 55535,
                  "nodeType": "IfStatement",
                  "src": "5257:240:85",
                  "trueBody": {
                    "id": 55534,
                    "nodeType": "Block",
                    "src": "5315:182:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 55527,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55505,
                              "src": "5449:7:85",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 55524,
                              "name": "CONSTANT_INFLOW_NFT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55320,
                              "src": "5424:19:85",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IConstantInflowNFT_$52163",
                                "typeString": "contract IConstantInflowNFT"
                              }
                            },
                            "id": 55526,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5444:4:85",
                            "memberName": "burn",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 52162,
                            "src": "5424:24:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) external"
                            }
                          },
                          "id": 55528,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5424:33:85",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 55529,
                        "nodeType": "ExpressionStatement",
                        "src": "5424:33:85"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 55531,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 55505,
                              "src": "5478:7:85",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 55530,
                            "name": "_burn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              55666
                            ],
                            "referencedDeclaration": 55666,
                            "src": "5472:5:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 55532,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5472:14:85",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 55533,
                        "nodeType": "ExpressionStatement",
                        "src": "5472:14:85"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              52216
            ],
            "documentation": {
              "id": 55492,
              "nodeType": "StructuredDocumentation",
              "src": "4599:364:85",
              "text": "@notice Hook called by CFA contract on flow deletion\n @dev This function burns the COF NFT and burns the CIF NFT\n @param superToken the SuperToken contract address\n @param flowSender the flow sender\n @param flowReceiver the flow receiver\n NOTE: We do an existence check in here to determine whether or not to execute the hook"
            },
            "functionSelector": "ef1f0237",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 55502,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 55501,
                  "name": "onlyFlowAgreements",
                  "nameLocations": [
                    "5096:18:85"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 55682,
                  "src": "5096:18:85"
                },
                "nodeType": "ModifierInvocation",
                "src": "5096:18:85"
              }
            ],
            "name": "onDelete",
            "nameLocation": "4977:8:85",
            "parameters": {
              "id": 55500,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55495,
                  "mutability": "mutable",
                  "name": "superToken",
                  "nameLocation": "5012:10:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55537,
                  "src": "4995:27:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISuperfluidToken_$53981",
                    "typeString": "contract ISuperfluidToken"
                  },
                  "typeName": {
                    "id": 55494,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 55493,
                      "name": "ISuperfluidToken",
                      "nameLocations": [
                        "4995:16:85"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 53981,
                      "src": "4995:16:85"
                    },
                    "referencedDeclaration": 53981,
                    "src": "4995:16:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISuperfluidToken_$53981",
                      "typeString": "contract ISuperfluidToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55497,
                  "mutability": "mutable",
                  "name": "flowSender",
                  "nameLocation": "5040:10:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55537,
                  "src": "5032:18:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55496,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5032:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55499,
                  "mutability": "mutable",
                  "name": "flowReceiver",
                  "nameLocation": "5068:12:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55537,
                  "src": "5060:20:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55498,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5060:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4985:101:85"
            },
            "returnParameters": {
              "id": 55503,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5115:0:85"
            },
            "scope": 55683,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 55552,
            "nodeType": "FunctionDefinition",
            "src": "5541:160:85",
            "nodes": [],
            "body": {
              "id": 55551,
              "nodeType": "Block",
              "src": "5639:62:85",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "baseExpression": {
                        "id": 55546,
                        "name": "_flowDataByTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55326,
                        "src": "5656:18:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$52234_storage_$",
                          "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData storage ref)"
                        }
                      },
                      "id": 55548,
                      "indexExpression": {
                        "id": 55547,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55540,
                        "src": "5675:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "5656:27:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_FlowNFTData_$52234_storage",
                        "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                      }
                    },
                    "id": 55549,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "5684:10:85",
                    "memberName": "flowSender",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 52229,
                    "src": "5656:38:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 55545,
                  "id": 55550,
                  "nodeType": "Return",
                  "src": "5649:45:85"
                }
              ]
            },
            "baseFunctions": [
              56488
            ],
            "documentation": {
              "id": 55538,
              "nodeType": "StructuredDocumentation",
              "src": "5509:27:85",
              "text": "@inheritdoc FlowNFTBase"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_ownerOf",
            "nameLocation": "5550:8:85",
            "overrides": {
              "id": 55542,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5612:8:85"
            },
            "parameters": {
              "id": 55541,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55540,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "5576:7:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55552,
                  "src": "5568:15:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 55539,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5568:7:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5558:31:85"
            },
            "returnParameters": {
              "id": 55545,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55544,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 55552,
                  "src": "5630:7:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55543,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5630:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5629:9:85"
            },
            "scope": 55683,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 55567,
            "nodeType": "FunctionDefinition",
            "src": "5841:186:85",
            "nodes": [],
            "body": {
              "id": 55566,
              "nodeType": "Block",
              "src": "5970:57:85",
              "nodes": [],
              "statements": [
                {
                  "errorCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 55563,
                      "name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 52250,
                      "src": "5987:31:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_error_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 55564,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5987:33:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 55565,
                  "nodeType": "RevertStatement",
                  "src": "5980:40:85"
                }
              ]
            },
            "baseFunctions": [
              56497
            ],
            "documentation": {
              "id": 55553,
              "nodeType": "StructuredDocumentation",
              "src": "5707:129:85",
              "text": "@notice Reverts - Transfer of outflow NFT is not allowed.\n @dev We revert when users attempt to transfer outflow NFTs."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transfer",
            "nameLocation": "5850:9:85",
            "overrides": {
              "id": 55561,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5961:8:85"
            },
            "parameters": {
              "id": 55560,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55555,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 55567,
                  "src": "5869:7:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55554,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5869:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55557,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 55567,
                  "src": "5895:7:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55556,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5895:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55559,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 55567,
                  "src": "5919:7:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 55558,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5919:7:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5859:84:85"
            },
            "returnParameters": {
              "id": 55562,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5970:0:85"
            },
            "scope": 55683,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 55631,
            "nodeType": "FunctionDefinition",
            "src": "6527:825:85",
            "nodes": [],
            "body": {
              "id": 55630,
              "nodeType": "Block",
              "src": "6671:681:85",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 55584,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 55579,
                      "name": "flowSender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 55572,
                      "src": "6685:10:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 55582,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6707:1:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 55581,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "6699:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 55580,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6699:7:85",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 55583,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6699:10:85",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6685:24:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 55589,
                  "nodeType": "IfStatement",
                  "src": "6681:92:85",
                  "trueBody": {
                    "id": 55588,
                    "nodeType": "Block",
                    "src": "6711:62:85",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 55585,
                            "name": "COF_NFT_MINT_TO_ZERO_ADDRESS",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 52177,
                            "src": "6732:28:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 55586,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6732:30:85",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 55587,
                        "nodeType": "RevertStatement",
                        "src": "6725:37:85"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 55592,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 55590,
                      "name": "flowSender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 55572,
                      "src": "6787:10:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 55591,
                      "name": "flowReceiver",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 55574,
                      "src": "6801:12:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6787:26:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 55597,
                  "nodeType": "IfStatement",
                  "src": "6783:104:85",
                  "trueBody": {
                    "id": 55596,
                    "nodeType": "Block",
                    "src": "6815:72:85",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 55593,
                            "name": "COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 52175,
                            "src": "6836:38:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 55594,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6836:40:85",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 55595,
                        "nodeType": "RevertStatement",
                        "src": "6829:47:85"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "arguments": [
                      {
                        "id": 55599,
                        "name": "newTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55576,
                        "src": "6909:10:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 55598,
                      "name": "_exists",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 56408,
                      "src": "6901:7:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256) view returns (bool)"
                      }
                    },
                    "id": 55600,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6901:19:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 55605,
                  "nodeType": "IfStatement",
                  "src": "6897:87:85",
                  "trueBody": {
                    "id": 55604,
                    "nodeType": "Block",
                    "src": "6922:62:85",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 55601,
                            "name": "COF_NFT_TOKEN_ALREADY_EXISTS",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 52183,
                            "src": "6943:28:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 55602,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6943:30:85",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 55603,
                        "nodeType": "RevertStatement",
                        "src": "6936:37:85"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 55619,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 55606,
                        "name": "_flowDataByTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55326,
                        "src": "7045:18:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$52234_storage_$",
                          "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData storage ref)"
                        }
                      },
                      "id": 55608,
                      "indexExpression": {
                        "id": 55607,
                        "name": "newTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55576,
                        "src": "7064:10:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7045:30:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_FlowNFTData_$52234_storage",
                        "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 55610,
                          "name": "superToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55570,
                          "src": "7103:10:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 55611,
                          "name": "flowSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55572,
                          "src": "7127:10:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 55612,
                          "name": "flowReceiver",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55574,
                          "src": "7151:12:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "expression": {
                                "id": 55615,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "7184:5:85",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 55616,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7190:9:85",
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "7184:15:85",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 55614,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7177:6:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint32_$",
                              "typeString": "type(uint32)"
                            },
                            "typeName": {
                              "id": 55613,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "7177:6:85",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 55617,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7177:23:85",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        ],
                        "id": 55609,
                        "name": "FlowNFTData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 52234,
                        "src": "7078:11:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_FlowNFTData_$52234_storage_ptr_$",
                          "typeString": "type(struct IFlowNFTBase.FlowNFTData storage pointer)"
                        }
                      },
                      "id": 55618,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7078:149:85",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_FlowNFTData_$52234_memory_ptr",
                        "typeString": "struct IFlowNFTBase.FlowNFTData memory"
                      }
                    },
                    "src": "7045:182:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FlowNFTData_$52234_storage",
                      "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                    }
                  },
                  "id": 55620,
                  "nodeType": "ExpressionStatement",
                  "src": "7045:182:85"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 55624,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7318:1:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 55623,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "7310:7:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 55622,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "7310:7:85",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 55625,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7310:10:85",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 55626,
                        "name": "flowSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55572,
                        "src": "7322:10:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 55627,
                        "name": "newTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55576,
                        "src": "7334:10:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 55621,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 31227,
                      "src": "7301:8:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 55628,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7301:44:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 55629,
                  "nodeType": "EmitStatement",
                  "src": "7296:49:85"
                }
              ]
            },
            "documentation": {
              "id": 55568,
              "nodeType": "StructuredDocumentation",
              "src": "6033:489:85",
              "text": "@notice Mints `newTokenId` and transfers it to `flowSender`\n @dev `newTokenId` must not exist `flowSender` cannot be `address(0)` and we emit a {Transfer} event.\n `flowSender` cannot be equal to `flowReceiver`.\n @param superToken the SuperToken contract address\n @param flowSender the receiver of the newly minted outflow nft (to)\n @param flowReceiver the flow receiver (owner of the InflowNFT)\n @param newTokenId the new token id to be minted"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_mint",
            "nameLocation": "6536:5:85",
            "parameters": {
              "id": 55577,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55570,
                  "mutability": "mutable",
                  "name": "superToken",
                  "nameLocation": "6559:10:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55631,
                  "src": "6551:18:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55569,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6551:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55572,
                  "mutability": "mutable",
                  "name": "flowSender",
                  "nameLocation": "6587:10:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55631,
                  "src": "6579:18:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55571,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6579:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55574,
                  "mutability": "mutable",
                  "name": "flowReceiver",
                  "nameLocation": "6615:12:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55631,
                  "src": "6607:20:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 55573,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6607:7:85",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55576,
                  "mutability": "mutable",
                  "name": "newTokenId",
                  "nameLocation": "6645:10:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55631,
                  "src": "6637:18:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 55575,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6637:7:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6541:120:85"
            },
            "returnParameters": {
              "id": 55578,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6671:0:85"
            },
            "scope": 55683,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 55666,
            "nodeType": "FunctionDefinition",
            "src": "7572:343:85",
            "nodes": [],
            "body": {
              "id": 55665,
              "nodeType": "Block",
              "src": "7622:293:85",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    55639
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 55639,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "7640:5:85",
                      "nodeType": "VariableDeclaration",
                      "scope": 55665,
                      "src": "7632:13:85",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 55638,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7632:7:85",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 55644,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 55642,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55634,
                        "src": "7668:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 55640,
                        "name": "FlowNFTBase",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 56528,
                        "src": "7648:11:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_FlowNFTBase_$56528_$",
                          "typeString": "type(contract FlowNFTBase)"
                        }
                      },
                      "id": 55641,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7660:7:85",
                      "memberName": "ownerOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 55917,
                      "src": "7648:19:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 55643,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7648:28:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7632:44:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 55648,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55634,
                        "src": "7699:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 55645,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "7687:5:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ConstantOutflowNFT_$55683_$",
                          "typeString": "type(contract super ConstantOutflowNFT)"
                        }
                      },
                      "id": 55647,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7693:5:85",
                      "memberName": "_burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 56527,
                      "src": "7687:11:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 55649,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7687:20:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 55650,
                  "nodeType": "ExpressionStatement",
                  "src": "7687:20:85"
                },
                {
                  "expression": {
                    "id": 55654,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "7771:34:85",
                    "subExpression": {
                      "baseExpression": {
                        "id": 55651,
                        "name": "_flowDataByTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55326,
                        "src": "7778:18:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$52234_storage_$",
                          "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData storage ref)"
                        }
                      },
                      "id": 55653,
                      "indexExpression": {
                        "id": 55652,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55634,
                        "src": "7797:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7778:27:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_FlowNFTData_$52234_storage",
                        "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 55655,
                  "nodeType": "ExpressionStatement",
                  "src": "7771:34:85"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 55657,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55639,
                        "src": "7881:5:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 55660,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7896:1:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 55659,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "7888:7:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 55658,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "7888:7:85",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 55661,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7888:10:85",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 55662,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 55634,
                        "src": "7900:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 55656,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 31227,
                      "src": "7872:8:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 55663,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7872:36:85",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 55664,
                  "nodeType": "EmitStatement",
                  "src": "7867:41:85"
                }
              ]
            },
            "baseFunctions": [
              56527
            ],
            "documentation": {
              "id": 55632,
              "nodeType": "StructuredDocumentation",
              "src": "7358:209:85",
              "text": "@notice Destroys token with `tokenId` and clears approvals from previous owner.\n @dev `tokenId` must exist AND we emit a {Transfer} event\n @param tokenId the id of the token we are destroying"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nameLocation": "7581:5:85",
            "overrides": {
              "id": 55636,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7613:8:85"
            },
            "parameters": {
              "id": 55635,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55634,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "7595:7:85",
                  "nodeType": "VariableDeclaration",
                  "scope": 55666,
                  "src": "7587:15:85",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 55633,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7587:7:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7586:17:85"
            },
            "returnParameters": {
              "id": 55637,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7622:0:85"
            },
            "scope": 55683,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 55682,
            "nodeType": "ModifierDefinition",
            "src": "7921:174:85",
            "nodes": [],
            "body": {
              "id": 55681,
              "nodeType": "Block",
              "src": "7951:144:85",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 55674,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 55668,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "7965:3:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 55669,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7969:6:85",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "7965:10:85",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "id": 55672,
                          "name": "CONSTANT_FLOW_AGREEMENT_V1",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55717,
                          "src": "7987:26:85",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$51249",
                            "typeString": "contract IConstantFlowAgreementV1"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$51249",
                            "typeString": "contract IConstantFlowAgreementV1"
                          }
                        ],
                        "id": 55671,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "7979:7:85",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 55670,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7979:7:85",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 55673,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7979:35:85",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7965:49:85",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 55679,
                  "nodeType": "IfStatement",
                  "src": "7961:117:85",
                  "trueBody": {
                    "id": 55678,
                    "nodeType": "Block",
                    "src": "8016:62:85",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 55675,
                            "name": "COF_NFT_ONLY_FLOW_AGREEMENTS",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 52181,
                            "src": "8037:28:85",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 55676,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8037:30:85",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 55677,
                        "nodeType": "RevertStatement",
                        "src": "8030:37:85"
                      }
                    ]
                  }
                },
                {
                  "id": 55680,
                  "nodeType": "PlaceholderStatement",
                  "src": "8087:1:85"
                }
              ]
            },
            "name": "onlyFlowAgreements",
            "nameLocation": "7930:18:85",
            "parameters": {
              "id": 55667,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7948:2:85"
            },
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 55314,
              "name": "FlowNFTBase",
              "nameLocations": [
                "1093:11:85"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 56528,
              "src": "1093:11:85"
            },
            "id": 55315,
            "nodeType": "InheritanceSpecifier",
            "src": "1093:11:85"
          },
          {
            "baseName": {
              "id": 55316,
              "name": "IConstantOutflowNFT",
              "nameLocations": [
                "1106:19:85"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 52217,
              "src": "1106:19:85"
            },
            "id": 55317,
            "nodeType": "InheritanceSpecifier",
            "src": "1106:19:85"
          }
        ],
        "canonicalName": "ConstantOutflowNFT",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 55313,
          "nodeType": "StructuredDocumentation",
          "src": "777:285:85",
          "text": "@title ConstantOutflowNFT contract (COF NFT)\n @author Superfluid\n @notice The ConstantOutflowNFT contract to be minted to the flow sender on flow creation.\n @dev This contract uses mint/burn interface for flow creation/deletion and holds the actual storage for both NFTs."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          55683,
          52217,
          56528,
          52291,
          31355,
          31328,
          32121,
          63404,
          30205
        ],
        "name": "ConstantOutflowNFT",
        "nameLocation": "1071:18:85",
        "scope": 55684,
        "usedErrors": [
          52173,
          52175,
          52177,
          52179,
          52181,
          52183,
          52236,
          52238,
          52240,
          52242,
          52244,
          52246,
          52248,
          52250,
          52252
        ]
      }
    ],
    "license": "AGPLv3"
  },
  "id": 85
}